/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulatheure;

import Reseau.*;
import de.javasoft.plaf.synthetica.SyntheticaBlackEyeLookAndFeel;
import javax.swing.*;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.event.WindowEvent;
import java.io.*;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.StyleConstants;
import java.util.Stack;
import javax.imageio.ImageIO;
import java.awt.Graphics2D;
import java.awt.Graphics;



/**
 *
 * @author rem54
 */
public class SimulatHeure extends javax.swing.JFrame {

    /**
     * Creates new form SimulatHeure
     */
    public Simulation Sim;
    public List<Node> selectedNode;
    public Node nodeBuffer;
    public Route selectedRoute;
    public List<Line>  selectedLine;
    public Bus selectedBus;
    public Directions selectedDirections;
    public int createLineState;
    public String selectedObject;
    public String createRouteState;
    public SimTimer simTimer;
    
    private final int stackSize = 25;
    private final Stack<byte[]> CTRLZ = new SizedStack<>(stackSize);
    private final Stack<byte[]> CTRLY = new SizedStack<>(stackSize);
    
    public DefaultComboBoxModel listRoutesModel;
    public DefaultComboBoxModel listSubRoutesModel;
    public DefaultComboBoxModel listDirectionsModel;
    public DefaultComboBoxModel listSourcesModel;
    public DefaultComboBoxModel listPossibleSourcesModel;
    
    private Cursor defaultCursor;
    private Cursor handCursor;
    private Cursor quadraArrowsCursor;
    private String mouseClickState;
    private Boolean mouseClickStatePersistance;
    private Boolean dragMove;
    private Boolean dragSelect;
    private int pressedX;
    private int pressedY;
    private BackgroundImage savedBgImage;
    private BackgroundImage temporaryBgImage;
    
    public SimulatHeure()  {

        initComponents();
        Sim = new Simulation();
        selectedNode = new ArrayList<>();
        selectedLine = new ArrayList<>();
        display.Sim = Sim;
        createRouteState = "idle";
        mouseClickState = "selection";
        mouseClickStatePersistance = true;
        pressedX = 0;
        pressedY = 0;
        simTimer = new SimTimer(Sim, display, this);
        listRoutesModel = new DefaultComboBoxModel();
        listSubRoutesModel = new DefaultComboBoxModel();
        listSourcesModel = new DefaultComboBoxModel();
        listPossibleSourcesModel = new DefaultComboBoxModel();
        listDirectionsModel = new DefaultComboBoxModel();
        listRoutes.setModel(listRoutesModel);
        listSources.setModel(listSourcesModel);
        listSubRoutes.setModel(listSubRoutesModel);
        comboSource.setModel(listPossibleSourcesModel);
        listDirections.setModel(listDirectionsModel);
        Dialog_circuit.pack();
        createLineState = 0;
        dragMove = false;
        dragSelect = false;
        timeJSpinnerStart.setNewTime(5, 0);
        timeJSpinnerStartSim.setNewTime(5, 0);
        timeJSpinnerStop.setNewTime(1, 0);
        
        defaultCursor = new Cursor(0); // pointing hand
        handCursor = new Cursor(12); // pointing hand
        quadraArrowsCursor = new Cursor(13); // crosshair arrows
        savedBgImage = new BackgroundImage();
        temporaryBgImage = new BackgroundImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Dialog_circuit = new javax.swing.JDialog();
        ok_dialog_circuit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spin_num = new javax.swing.JSpinner();
        spinFreqType = new javax.swing.JSpinner();
        spin_t = new javax.swing.JSpinner();
        maxBus = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listSources = new javax.swing.JList();
        buttonSource = new javax.swing.JButton();
        comboSource = new javax.swing.JComboBox();
        buttonApplySource = new javax.swing.JButton();
        buttonDeleteSource = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        checkLoop = new javax.swing.JCheckBox();
        spinFreqMax = new javax.swing.JSpinner();
        spinFreqMin = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem12 = new javax.swing.JMenuItem();
        editionButtonGroup = new javax.swing.ButtonGroup();
        Dialog_besoin_transport = new javax.swing.JDialog();
        okDirections = new javax.swing.JButton();
        routesComboBox = new javax.swing.JComboBox();
        startComboBox = new javax.swing.JComboBox();
        endComboBox = new javax.swing.JComboBox();
        addSubRouteButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSubRoutes = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        spinFirstStart = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        spinTypeFreqPassenger = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        spinTypeMaxPassenger = new javax.swing.JSpinner();
        spinTypeMinPassenger = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jInternalFrame5 = new javax.swing.JInternalFrame();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        addBackgroundDialog = new javax.swing.JDialog();
        openBgImageLabel = new javax.swing.JLabel();
        openBgImageFileButton = new javax.swing.JButton();
        bgImageTitleLabel = new javax.swing.JLabel();
        scaleAdjustSlider = new javax.swing.JSlider();
        scaleAdjustLabel = new javax.swing.JLabel();
        cancelBgButton = new javax.swing.JButton();
        applyChangesButton = new javax.swing.JButton();
        bgEnabledToggle = new javax.swing.JToggleButton();
        bgDisabledToggle = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JSeparator();
        bgActiveSelector = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        Print = new javax.swing.JTextPane();
        display = new simulatheure.SimDisplay();
        displayLabelCoordonnees = new javax.swing.JLabel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        listRoutes = new javax.swing.JList();
        Bouton_circuit_add = new javax.swing.JButton();
        buttonEditRoute = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        Bouton_arreter = new javax.swing.JButton();
        Bouton_simuler = new javax.swing.JButton();
        simulation_speed = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        sim_time = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        timeJSpinnerStart = new simulatheure.TimeJSpinner();
        timeJSpinnerStop = new simulatheure.TimeJSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        timeJSpinnerStartSim = new simulatheure.TimeJSpinner();
        jLabel24 = new javax.swing.JLabel();
        skipBox = new javax.swing.JCheckBox();
        spinNumberOfSimulations = new javax.swing.JSpinner();
        buttonRecenter = new javax.swing.JButton();
        editionToolbox = new javax.swing.JInternalFrame();
        addNodeToggleButton = new javax.swing.JToggleButton();
        addAreteToggleButton = new javax.swing.JToggleButton();
        selectorToggleButton = new javax.swing.JToggleButton();
        moveToggleButton = new javax.swing.JToggleButton();
        jInternalFrame3 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        checkBoxStation = new javax.swing.JCheckBox();
        textStationName = new javax.swing.JFormattedTextField();
        jButton3 = new javax.swing.JButton();
        jInternalFrame4 = new javax.swing.JInternalFrame();
        jScrollPane5 = new javax.swing.JScrollPane();
        listDirections = new javax.swing.JList();
        buttonBesoins = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jInternalFrame6 = new javax.swing.JInternalFrame();
        spinMinTime = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        spinMaxTime = new javax.swing.JSpinner();
        spinTypeTime = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        applyLine = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFolderFichier = new javax.swing.JMenu();
        menuCommandNouvDoc = new javax.swing.JMenuItem();
        menuCommandOuvrir = new javax.swing.JMenuItem();
        menuCommandEnregistrer = new javax.swing.JMenuItem();
        menuCommandEnregSous = new javax.swing.JMenuItem();
        menuFolderEdition = new javax.swing.JMenu();
        menuCommandSupprimer = new javax.swing.JMenuItem();
        menuCommandAjouterNoeud = new javax.swing.JMenuItem();
        menuCommandAjouterArete = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuCommandDeplacerNoeud = new javax.swing.JMenuItem();
        menuUndo = new javax.swing.JMenuItem();
        menuRedo = new javax.swing.JMenuItem();
        menuFolderSimulation = new javax.swing.JMenu();
        menuCommandLancerSim = new javax.swing.JMenuItem();
        menuCommandStopperSim = new javax.swing.JMenuItem();
        menuCommandAnalResults = new javax.swing.JMenuItem();
        menuFolderCircuit = new javax.swing.JMenu();
        menuCommandAjouterCircuit = new javax.swing.JMenuItem();
        menuCommandModCircuit = new javax.swing.JMenuItem();
        menuFolderAffichage = new javax.swing.JMenu();
        backgroundSelectorMenuItem = new javax.swing.JMenuItem();
        displayGridSelectMenu = new javax.swing.JCheckBoxMenuItem();
        menuSubfolderToolboxes = new javax.swing.JMenu();
        menuOptionSeeEditionToolbox = new javax.swing.JCheckBoxMenuItem();
        menuOptionSeeCircuitToolbox = new javax.swing.JCheckBoxMenuItem();
        menuOptionSeeSimToolbox = new javax.swing.JCheckBoxMenuItem();
        menuSubfolderInformation = new javax.swing.JMenu();
        menuOptionSeeCoordsDisplay = new javax.swing.JCheckBoxMenuItem();
        menuOptionSeeTooltipsDisplay = new javax.swing.JCheckBoxMenuItem();

        Dialog_circuit.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        Dialog_circuit.setAlwaysOnTop(true);
        Dialog_circuit.setBounds(new java.awt.Rectangle(100, 1, 200, 350));
        Dialog_circuit.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        Dialog_circuit.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        Dialog_circuit.setResizable(false);
        Dialog_circuit.setSize(new java.awt.Dimension(156, 254));
        Dialog_circuit.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                Dialog_circuitWindowClosing(evt);
            }
        });

        ok_dialog_circuit.setText("Ok");
        ok_dialog_circuit.setToolTipText("Appliquer et quitter.");
        ok_dialog_circuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_dialog_circuitActionPerformed(evt);
            }
        });

        jLabel3.setText("Numéro");
        jLabel3.setToolTipText("Numéro d'identification du bus");

        jLabel4.setText("Fréquence min");
        jLabel4.setToolTipText("Temps minimal entre chaque départ");

        jLabel5.setText("Délai initial");
        jLabel5.setToolTipText("Délai avant le premier départ de bus");

        spin_num.setModel(new javax.swing.SpinnerNumberModel(1, 1, 999, 1));
        spin_num.setToolTipText("Numéro d'identification du bus");

        spinFreqType.setModel(new javax.swing.SpinnerNumberModel(15, 1, 999, 1));
        spinFreqType.setToolTipText("Temps typique entre chaque départ");

        spin_t.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        spin_t.setToolTipText("Délai avant le premier départ de bus");

        maxBus.setModel(new javax.swing.SpinnerNumberModel(25, 1, 999, 1));
        maxBus.setToolTipText("Nombre maximal de bus pouvant se trouver sur le circuit à un moment donné");

        jLabel10.setText("Nombre max de bus");
        jLabel10.setToolTipText("Nombre maximal de bus pouvant se trouver sur le circuit à un moment donné");

        listSources.setToolTipText("Liste des départs du circuit");
        listSources.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listSourcesMouseClicked(evt);
            }
        });
        listSources.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSourcesValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listSources);

        buttonSource.setText("Ajouter source");
        buttonSource.setToolTipText("Ajouter une nouvelle source de départ");
        buttonSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSourceActionPerformed(evt);
            }
        });

        comboSource.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboSource.setToolTipText("Station de départ des bus");
        comboSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSourceActionPerformed(evt);
            }
        });

        buttonApplySource.setText("Appliquer");
        buttonApplySource.setToolTipText("Appliquer les changements sur la source selectionnée");
        buttonApplySource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplySourceActionPerformed(evt);
            }
        });

        buttonDeleteSource.setText("Supprimer Source");
        buttonDeleteSource.setToolTipText("Supprimer la source selectionnée");
        buttonDeleteSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteSourceActionPerformed(evt);
            }
        });

        checkLoop.setToolTipText("Si coché, les buses continueront leur trajet à l'infini.");
        checkLoop.setEnabled(false);
        checkLoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLoopActionPerformed(evt);
            }
        });

        spinFreqMax.setModel(new javax.swing.SpinnerNumberModel(15, 1, 999, 1));
        spinFreqMax.setToolTipText("Temps maximal entre chaque départ");

        spinFreqMin.setModel(new javax.swing.SpinnerNumberModel(15, 1, 999, 1));
        spinFreqMin.setToolTipText("Temps minimal entre chaque départ");

        jLabel19.setText("Fréquence Max");
        jLabel19.setToolTipText("Temps maximal entre chaque départ");

        jLabel20.setText("Fréquence Typique");
        jLabel20.setToolTipText("Temps typique entre chaque départ");

        jLabel22.setText("Source");
        jLabel22.setToolTipText("Station de départ des bus");

        jLabel7.setText("Roule en boucle");
        jLabel7.setToolTipText("Si coché, les buses continueront leur trajet à l'infini.");

        jLabel23.setText("Édition de circuit");

        jButton1.setText("Annuler");
        jButton1.setToolTipText("Annule les changements apportés");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Dialog_circuitLayout = new javax.swing.GroupLayout(Dialog_circuit.getContentPane());
        Dialog_circuit.getContentPane().setLayout(Dialog_circuitLayout);
        Dialog_circuitLayout.setHorizontalGroup(
            Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                    .addComponent(buttonSource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(spinFreqMax, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(spinFreqType, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Dialog_circuitLayout.createSequentialGroup()
                                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboSource, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spin_t, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spinFreqMin, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(buttonDeleteSource, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Dialog_circuitLayout.createSequentialGroup()
                                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(maxBus, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(checkLoop)))
                            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spin_num, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator4)))
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(jLabel23))
                            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(buttonApplySource, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ok_dialog_circuit, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        Dialog_circuitLayout.setVerticalGroup(
            Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spin_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxBus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkLoop)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(spin_t, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(spinFreqMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(spinFreqMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(spinFreqType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSource)
                    .addComponent(buttonDeleteSource))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonApplySource)
                    .addComponent(jButton1)
                    .addComponent(ok_dialog_circuit))
                .addGap(19, 19, 19))
        );

        jMenuItem12.setText("jMenuItem12");

        Dialog_besoin_transport.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        Dialog_besoin_transport.setAlwaysOnTop(true);
        Dialog_besoin_transport.setMinimumSize(new java.awt.Dimension(440, 350));
        Dialog_besoin_transport.setModal(true);
        Dialog_besoin_transport.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        Dialog_besoin_transport.setResizable(false);
        Dialog_besoin_transport.setSize(new java.awt.Dimension(440, 400));
        Dialog_besoin_transport.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                Dialog_besoin_transportWindowClosing(evt);
            }
        });

        okDirections.setText("Ok");
        okDirections.setToolTipText("Terminer et quitter");
        okDirections.setEnabled(false);
        okDirections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okDirectionsActionPerformed(evt);
            }
        });

        routesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        routesComboBox.setSelectedItem(null);
        routesComboBox.setToolTipText("Circuits disponibles");
        routesComboBox.setEnabled(false);
        routesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routesComboBoxActionPerformed(evt);
            }
        });

        startComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        startComboBox.setSelectedItem(null);
        startComboBox.setToolTipText("Station génératrice de besoins");
        startComboBox.setEnabled(false);
        startComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startComboBoxActionPerformed(evt);
            }
        });

        endComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        endComboBox.setSelectedItem(null);
        endComboBox.setToolTipText("Station de fin du besoin actuel");
        endComboBox.setEnabled(false);
        endComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endComboBoxActionPerformed(evt);
            }
        });

        addSubRouteButton.setText("Ajouter");
        addSubRouteButton.setToolTipText("Ajouter à la liste des besoins");
        addSubRouteButton.setEnabled(false);
        addSubRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubRouteButtonActionPerformed(evt);
            }
        });

        listSubRoutes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listSubRoutes.setToolTipText("Liste des besoins en transport à ajouter");
        jScrollPane2.setViewportView(listSubRoutes);

        jLabel2.setText("Station de transit/d'arrivé");
        jLabel2.setToolTipText("");

        jLabel11.setText("Station de départ");

        jLabel12.setText("Circuit");

        spinFirstStart.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        spinFirstStart.setToolTipText("Délai avant premier besoin");

        jLabel13.setText("Premier départ");

        spinTypeFreqPassenger.setModel(new javax.swing.SpinnerNumberModel(1, 1, 999, 1));
        spinTypeFreqPassenger.setToolTipText("Temps entre chaque nouveau besoins");

        jLabel14.setText("Fréquence minimum");

        spinTypeMaxPassenger.setModel(new javax.swing.SpinnerNumberModel(1, 1, 999, 1));

        spinTypeMinPassenger.setModel(new javax.swing.SpinnerNumberModel(1, 1, 999, 1));

        jLabel25.setText("Fréquence maximum");

        jLabel26.setText("Fréuence typique");

        javax.swing.GroupLayout Dialog_besoin_transportLayout = new javax.swing.GroupLayout(Dialog_besoin_transport.getContentPane());
        Dialog_besoin_transport.getContentPane().setLayout(Dialog_besoin_transportLayout);
        Dialog_besoin_transportLayout.setHorizontalGroup(
            Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Dialog_besoin_transportLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(startComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(routesComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Dialog_besoin_transportLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(addSubRouteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okDirections, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 10, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Dialog_besoin_transportLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinTypeFreqPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinFirstStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinTypeMaxPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spinTypeMinPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        Dialog_besoin_transportLayout.setVerticalGroup(
            Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(routesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(spinFirstStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(spinTypeMinPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel26)
                                    .addComponent(spinTypeFreqPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(addSubRouteButton)
                                    .addComponent(okDirections)))
                            .addComponent(spinTypeMaxPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(10, 10, 10))
        );

        jInternalFrame5.setVisible(true);

        javax.swing.GroupLayout jInternalFrame5Layout = new javax.swing.GroupLayout(jInternalFrame5.getContentPane());
        jInternalFrame5.getContentPane().setLayout(jInternalFrame5Layout);
        jInternalFrame5Layout.setHorizontalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame5Layout.setVerticalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        addBackgroundDialog.setTitle("Réglage de l'image de fond");
        addBackgroundDialog.setAutoRequestFocus(false);
        addBackgroundDialog.setResizable(false);
        addBackgroundDialog.setSize(new java.awt.Dimension(355, 230));

        openBgImageLabel.setText("Choisir image");

        openBgImageFileButton.setText("Ouvrir");
        openBgImageFileButton.setToolTipText("");
        openBgImageFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBgImageFileButtonActionPerformed(evt);
            }
        });

        bgImageTitleLabel.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        bgImageTitleLabel.setForeground(new java.awt.Color(180, 180, 180));
        bgImageTitleLabel.setText("Pas d'image selectionnée");

        scaleAdjustSlider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scaleAdjustSliderMouseReleased(evt);
            }
        });

        scaleAdjustLabel.setText("Réglage de l'échelle:");

        cancelBgButton.setText("Annuler");
        cancelBgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBgButtonActionPerformed(evt);
            }
        });

        applyChangesButton.setText("Ok");
        applyChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyChangesButtonActionPerformed(evt);
            }
        });

        bgActiveSelector.add(bgEnabledToggle);
        bgEnabledToggle.setText("Actif");
        bgEnabledToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgEnabledToggleActionPerformed(evt);
            }
        });

        bgActiveSelector.add(bgDisabledToggle);
        bgDisabledToggle.setText("Inactif");
        bgDisabledToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bgDisabledToggleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addBackgroundDialogLayout = new javax.swing.GroupLayout(addBackgroundDialog.getContentPane());
        addBackgroundDialog.getContentPane().setLayout(addBackgroundDialogLayout);
        addBackgroundDialogLayout.setHorizontalGroup(
            addBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addBackgroundDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addBackgroundDialogLayout.createSequentialGroup()
                        .addComponent(scaleAdjustLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scaleAdjustSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addBackgroundDialogLayout.createSequentialGroup()
                        .addComponent(openBgImageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(openBgImageFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bgImageTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(addBackgroundDialogLayout.createSequentialGroup()
                        .addGroup(addBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addBackgroundDialogLayout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(cancelBgButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(applyChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addBackgroundDialogLayout.createSequentialGroup()
                                .addComponent(bgEnabledToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(bgDisabledToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator5)
        );
        addBackgroundDialogLayout.setVerticalGroup(
            addBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addBackgroundDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bgEnabledToggle)
                    .addComponent(bgDisabledToggle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openBgImageLabel)
                    .addComponent(openBgImageFileButton)
                    .addComponent(bgImageTitleLabel))
                .addGap(18, 18, 18)
                .addGroup(addBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scaleAdjustSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scaleAdjustLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyChangesButton)
                    .addComponent(cancelBgButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SimulatHeure");
        setBackground(new java.awt.Color(0, 0, 0));

        Print.setEditable(false);
        Print.setBorder(null);
        Print.setToolTipText("");
        Print.setFocusable(false);
        jScrollPane1.setViewportView(Print);

        display.setBackground(new java.awt.Color(204, 204, 204));
        display.setAutoscrolls(true);
        display.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                displayMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                displayMouseMoved(evt);
            }
        });
        display.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                displayMouseWheelMoved(evt);
            }
        });
        display.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                displayMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                displayMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout displayLayout = new javax.swing.GroupLayout(display);
        display.setLayout(displayLayout);
        displayLayout.setHorizontalGroup(
            displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 957, Short.MAX_VALUE)
        );
        displayLayout.setVerticalGroup(
            displayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        displayLabelCoordonnees.setText("Coordonnées");
        displayLabelCoordonnees.setToolTipText("Coordonées du curseur");

        jInternalFrame1.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame1.setTitle("Circuit");
        jInternalFrame1.setAutoscrolls(true);
        jInternalFrame1.setFocusable(false);
        jInternalFrame1.setMinimumSize(new java.awt.Dimension(249, 160));
        jInternalFrame1.setVisible(true);
        jInternalFrame1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jInternalFrame1MouseEntered(evt);
            }
        });

        listRoutes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listRoutes.setToolTipText("Liste des circuits en activité");
        listRoutes.setMaximumSize(new java.awt.Dimension(100, 100));
        listRoutes.setMinimumSize(new java.awt.Dimension(100, 100));
        listRoutes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listRoutesMouseClicked(evt);
            }
        });
        listRoutes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listRoutesValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listRoutes);

        Bouton_circuit_add.setText("Ajouter");
        Bouton_circuit_add.setToolTipText("Créer un nouveau circuit");
        Bouton_circuit_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_circuit_addActionPerformed(evt);
            }
        });

        buttonEditRoute.setText("Modifier");
        buttonEditRoute.setToolTipText("Modifier le circuit sélectioné");
        buttonEditRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditRouteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(Bouton_circuit_add, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonEditRoute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addGap(6, 6, 6)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bouton_circuit_add)
                    .addComponent(buttonEditRoute))
                .addGap(6, 6, 6))
        );

        jInternalFrame2.setTitle("Simulation");
        jInternalFrame2.setFocusable(false);
        jInternalFrame2.setVisible(true);

        Bouton_arreter.setText("Arrêter");
        Bouton_arreter.setToolTipText("Arreter la simulation");
        Bouton_arreter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_arreterActionPerformed(evt);
            }
        });

        Bouton_simuler.setText("Simuler");
        Bouton_simuler.setToolTipText("Lancer la simulation");
        Bouton_simuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_simulerActionPerformed(evt);
            }
        });

        simulation_speed.setMaximum(20);
        simulation_speed.setMinimum(1);
        simulation_speed.setToolTipText("Regle la vitesse de simulation (glisser completement a gauche pour pauser)");
        simulation_speed.setValue(4);
        simulation_speed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                simulation_speedStateChanged(evt);
            }
        });

        jLabel8.setText("Vitesse");
        jLabel8.setToolTipText("Regle la vitesse de simulation (glisser completement a gauche pour pauser)");

        sim_time.setText("0");
        sim_time.setToolTipText("Temps depuis le début de la simulation");
        sim_time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sim_timeActionPerformed(evt);
            }
        });

        jLabel9.setText("Temps (m) ");
        jLabel9.setToolTipText("Temps depuis le début de la simulation");

        timeJSpinnerStart.setToolTipText("Heure de départ de la simulation");

        timeJSpinnerStop.setToolTipText("Heure de fin de la simulation");

        jLabel6.setText("Départ");
        jLabel6.setToolTipText("Heure de départ de la simulation");

        jLabel18.setText("Fin");
        jLabel18.setToolTipText("Heure de fin de la simulation");

        jLabel24.setText("Départ Sim");
        jLabel24.setToolTipText("Heure de fin de la simulation");

        skipBox.setText("Skip");
        skipBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipBoxActionPerformed(evt);
            }
        });

        spinNumberOfSimulations.setModel(new javax.swing.SpinnerNumberModel(1, 1, 999, 1));

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timeJSpinnerStartSim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(31, 31, 31)
                                .addComponent(timeJSpinnerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Bouton_simuler, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Bouton_arreter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(simulation_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(timeJSpinnerStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jInternalFrame2Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sim_time, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addComponent(skipBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinNumberOfSimulations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addComponent(Bouton_simuler)
                .addGap(5, 5, 5)
                .addComponent(Bouton_arreter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(skipBox, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinNumberOfSimulations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(simulation_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(timeJSpinnerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeJSpinnerStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeJSpinnerStartSim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addGap(10, 10, 10)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sim_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        buttonRecenter.setText("Recentrer");
        buttonRecenter.setToolTipText("Rencentrer l'affichage");
        buttonRecenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRecenterActionPerformed(evt);
            }
        });

        editionToolbox.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        editionToolbox.setTitle("Edition");
        editionToolbox.setVisible(true);

        editionButtonGroup.add(addNodeToggleButton);
        addNodeToggleButton.setText("Noeud");
        addNodeToggleButton.setToolTipText("Outil d'ajout de noeuds");
        addNodeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNodeToggleButtonActionPerformed(evt);
            }
        });

        editionButtonGroup.add(addAreteToggleButton);
        addAreteToggleButton.setText("Arête");
        addAreteToggleButton.setToolTipText("Outil d'ajout de noeuds et d'arêtes");
        addAreteToggleButton.setMaximumSize(new java.awt.Dimension(63, 23));
        addAreteToggleButton.setMinimumSize(new java.awt.Dimension(63, 23));
        addAreteToggleButton.setPreferredSize(new java.awt.Dimension(63, 23));
        addAreteToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAreteToggleButtonActionPerformed(evt);
            }
        });

        editionButtonGroup.add(selectorToggleButton);
        selectorToggleButton.setText("Selection");
        selectorToggleButton.setToolTipText("Outil de sélection d'elements");
        selectorToggleButton.setMaximumSize(new java.awt.Dimension(63, 23));
        selectorToggleButton.setMinimumSize(new java.awt.Dimension(63, 23));
        selectorToggleButton.setPreferredSize(new java.awt.Dimension(63, 23));
        selectorToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorToggleButtonActionPerformed(evt);
            }
        });

        editionButtonGroup.add(moveToggleButton);
        moveToggleButton.setText("Déplacer");
        moveToggleButton.setToolTipText("Outil de déplacement d'éléments");
        moveToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editionToolboxLayout = new javax.swing.GroupLayout(editionToolbox.getContentPane());
        editionToolbox.getContentPane().setLayout(editionToolboxLayout);
        editionToolboxLayout.setHorizontalGroup(
            editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editionToolboxLayout.createSequentialGroup()
                .addGroup(editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(selectorToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(addAreteToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moveToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addNodeToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        editionToolboxLayout.setVerticalGroup(
            editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editionToolboxLayout.createSequentialGroup()
                .addGroup(editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNodeToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addAreteToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moveToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        jInternalFrame3.setTitle("Noeud");
        jInternalFrame3.setVisible(true);

        jLabel1.setText("Nom");

        checkBoxStation.setText("Station");
        checkBoxStation.setToolTipText("Cocher pour transformer en station");

        textStationName.setText("-");
        textStationName.setToolTipText("Édition du nom d'une station (non-applicable aux noeuds)");

        jButton3.setText("Appliquer");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame3Layout = new javax.swing.GroupLayout(jInternalFrame3.getContentPane());
        jInternalFrame3.getContentPane().setLayout(jInternalFrame3Layout);
        jInternalFrame3Layout.setHorizontalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textStationName))
                    .addGroup(jInternalFrame3Layout.createSequentialGroup()
                        .addComponent(checkBoxStation)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jInternalFrame3Layout.setVerticalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame3Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textStationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(1, 1, 1)
                .addComponent(checkBoxStation)
                .addContainerGap())
        );

        jInternalFrame4.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrame4.setTitle("Besoin en transport");
        jInternalFrame4.setMaximumSize(new java.awt.Dimension(189, 140));
        jInternalFrame4.setMinimumSize(new java.awt.Dimension(189, 140));
        jInternalFrame4.setVisible(true);

        listDirections.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listDirections.setToolTipText("Liste des besoins en transport");
        listDirections.setMaximumSize(new java.awt.Dimension(100, 100));
        listDirections.setMinimumSize(new java.awt.Dimension(100, 100));
        listDirections.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listDirectionsMouseClicked(evt);
            }
        });
        listDirections.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listDirectionsValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(listDirections);

        buttonBesoins.setText("Ajouter");
        buttonBesoins.setToolTipText("Créer un besoin en transport");
        buttonBesoins.setEnabled(false);
        buttonBesoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBesoinsActionPerformed(evt);
            }
        });

        jButton2.setText("Editer");
        jButton2.setToolTipText("Modifier le besoin en transport sélectionné");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame4Layout = new javax.swing.GroupLayout(jInternalFrame4.getContentPane());
        jInternalFrame4.getContentPane().setLayout(jInternalFrame4Layout);
        jInternalFrame4Layout.setHorizontalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addComponent(buttonBesoins, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame4Layout.setVerticalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBesoins)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jInternalFrame6.setTitle("Arête");
        jInternalFrame6.setVisible(true);

        spinMinTime.setModel(new javax.swing.SpinnerNumberModel(20, 5, 100, 1));
        spinMinTime.setToolTipText("Vitesse minimale de transit");
        spinMinTime.setMaximumSize(new java.awt.Dimension(47, 20));

        jLabel15.setText("Min");
        jLabel15.setToolTipText("Vitesse minimale de transit");

        jLabel16.setText("Max");
        jLabel16.setToolTipText("Vitesse maximale de transit");

        spinMaxTime.setModel(new javax.swing.SpinnerNumberModel(20, 5, 100, 1));
        spinMaxTime.setToolTipText("Vitesse maximale de transit");

        spinTypeTime.setModel(new javax.swing.SpinnerNumberModel(20, 5, 100, 1));
        spinTypeTime.setToolTipText("Vitesse typique de transit");

        jLabel17.setText("Typical");
        jLabel17.setToolTipText("Vitesse typique de transit");

        applyLine.setText("Appliquer");
        applyLine.setToolTipText("Appliquer les changements apportés");
        applyLine.setEnabled(false);
        applyLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyLineActionPerformed(evt);
            }
        });

        jLabel21.setText("min");

        javax.swing.GroupLayout jInternalFrame6Layout = new javax.swing.GroupLayout(jInternalFrame6.getContentPane());
        jInternalFrame6.getContentPane().setLayout(jInternalFrame6Layout);
        jInternalFrame6Layout.setHorizontalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(applyLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jInternalFrame6Layout.createSequentialGroup()
                        .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinMaxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinMinTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinTypeTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jInternalFrame6Layout.setVerticalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame6Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinMinTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinMaxTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinTypeTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(10, 10, 10)
                .addComponent(applyLine)
                .addContainerGap())
        );

        menuFolderFichier.setText("Fichier");

        menuCommandNouvDoc.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK));
        menuCommandNouvDoc.setText("Nouveau document");
        menuCommandNouvDoc.setEnabled(false);
        menuFolderFichier.add(menuCommandNouvDoc);

        menuCommandOuvrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuCommandOuvrir.setText("Charger");
        menuCommandOuvrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandOuvrirActionPerformed(evt);
            }
        });
        menuFolderFichier.add(menuCommandOuvrir);

        menuCommandEnregistrer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuCommandEnregistrer.setText("Enregistrer");
        menuCommandEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandEnregistrerActionPerformed(evt);
            }
        });
        menuFolderFichier.add(menuCommandEnregistrer);

        menuCommandEnregSous.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuCommandEnregSous.setText("Enregistrer sous");
        menuCommandEnregSous.setEnabled(false);
        menuFolderFichier.add(menuCommandEnregSous);

        jMenuBar1.add(menuFolderFichier);

        menuFolderEdition.setText("Edition");

        menuCommandSupprimer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        menuCommandSupprimer.setText("Supprimer");
        menuCommandSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandSupprimerActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandSupprimer);

        menuCommandAjouterNoeud.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        menuCommandAjouterNoeud.setText("Ajouter Noeud");
        menuCommandAjouterNoeud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAjouterNoeudActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandAjouterNoeud);

        menuCommandAjouterArete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        menuCommandAjouterArete.setText("Ajouter Arête");
        menuCommandAjouterArete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAjouterAreteActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandAjouterArete);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Selectionner tout");
        jMenuItem1.setEnabled(false);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuFolderEdition.add(jMenuItem1);

        menuCommandDeplacerNoeud.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        menuCommandDeplacerNoeud.setText("Déplacer Noeud/Station");
        menuCommandDeplacerNoeud.setEnabled(false);
        menuCommandDeplacerNoeud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandDeplacerNoeudActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandDeplacerNoeud);

        menuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        menuUndo.setText("Annuler");
        menuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUndoActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuUndo);

        menuRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        menuRedo.setText("Répéter");
        menuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuRedoActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuRedo);

        jMenuBar1.add(menuFolderEdition);

        menuFolderSimulation.setText("Simulation");

        menuCommandLancerSim.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        menuCommandLancerSim.setText("Lancer simulation");
        menuCommandLancerSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandLancerSimActionPerformed(evt);
            }
        });
        menuFolderSimulation.add(menuCommandLancerSim);

        menuCommandStopperSim.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        menuCommandStopperSim.setText("Stopper simulation");
        menuCommandStopperSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandStopperSimActionPerformed(evt);
            }
        });
        menuFolderSimulation.add(menuCommandStopperSim);

        menuCommandAnalResults.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        menuCommandAnalResults.setText("Analyser resultats");
        menuCommandAnalResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAnalResultsActionPerformed(evt);
            }
        });
        menuFolderSimulation.add(menuCommandAnalResults);

        jMenuBar1.add(menuFolderSimulation);

        menuFolderCircuit.setText("Circuit");

        menuCommandAjouterCircuit.setText("Ajouter");
        menuCommandAjouterCircuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAjouterCircuitActionPerformed(evt);
            }
        });
        menuFolderCircuit.add(menuCommandAjouterCircuit);

        menuCommandModCircuit.setText("Modifier");
        menuCommandModCircuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandModCircuitActionPerformed(evt);
            }
        });
        menuFolderCircuit.add(menuCommandModCircuit);

        jMenuBar1.add(menuFolderCircuit);

        menuFolderAffichage.setText("Affichage");
        menuFolderAffichage.setToolTipText("");

        backgroundSelectorMenuItem.setText("Arrière-plan");
        backgroundSelectorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundSelectorMenuItemActionPerformed(evt);
            }
        });
        menuFolderAffichage.add(backgroundSelectorMenuItem);

        displayGridSelectMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        displayGridSelectMenu.setSelected(true);
        displayGridSelectMenu.setText("Grille");
        displayGridSelectMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayGridSelectMenuActionPerformed(evt);
            }
        });
        menuFolderAffichage.add(displayGridSelectMenu);

        menuSubfolderToolboxes.setText("Barres d'outils");
        menuSubfolderToolboxes.setEnabled(false);

        menuOptionSeeEditionToolbox.setSelected(true);
        menuOptionSeeEditionToolbox.setText("jCheckBoxMenuItem1");
        menuSubfolderToolboxes.add(menuOptionSeeEditionToolbox);

        menuOptionSeeCircuitToolbox.setSelected(true);
        menuOptionSeeCircuitToolbox.setText("Circuit");
        menuSubfolderToolboxes.add(menuOptionSeeCircuitToolbox);

        menuOptionSeeSimToolbox.setSelected(true);
        menuOptionSeeSimToolbox.setText("Simulation");
        menuSubfolderToolboxes.add(menuOptionSeeSimToolbox);

        menuFolderAffichage.add(menuSubfolderToolboxes);

        menuSubfolderInformation.setText("Informations");
        menuSubfolderInformation.setEnabled(false);

        menuOptionSeeCoordsDisplay.setSelected(true);
        menuOptionSeeCoordsDisplay.setText("Coordonées");
        menuOptionSeeCoordsDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOptionSeeCoordsDisplayActionPerformed(evt);
            }
        });
        menuSubfolderInformation.add(menuOptionSeeCoordsDisplay);

        menuOptionSeeTooltipsDisplay.setSelected(true);
        menuOptionSeeTooltipsDisplay.setText("Infobulle");
        menuSubfolderInformation.add(menuOptionSeeTooltipsDisplay);

        menuFolderAffichage.add(menuSubfolderInformation);

        jMenuBar1.add(menuFolderAffichage);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editionToolbox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jInternalFrame1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 208, Short.MAX_VALUE)
                            .addComponent(jInternalFrame4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jInternalFrame6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jInternalFrame2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jInternalFrame3))
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonRecenter)
                        .addGap(9, 9, 9)
                        .addComponent(displayLabelCoordonnees, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1)
                        .addGap(10, 10, 10))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jInternalFrame1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jInternalFrame2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jInternalFrame6)
                            .addComponent(jInternalFrame4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editionToolbox)
                            .addComponent(jInternalFrame3))
                        .addGap(0, 107, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(displayLabelCoordonnees, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(buttonRecenter))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void reloadInterface(){
            display.Sim = Sim;

            if (!Sim.listRoutes.isEmpty()){
                buttonBesoins.setEnabled(true);
            }
            //refait la liste dans l'interface
            listRoutesModel.removeAllElements();
            listDirectionsModel.removeAllElements();
            for (Route r: Sim.listRoutes){
                listRoutesModel.addElement(r.getNumber());
            }
            for (Directions d: Sim.listDirections){
                listDirectionsModel.addElement(d.getStartPoint().getName()+" à "+d.getEndPoint().getName());
            }

            display.repaint();
            simTimer = new SimTimer(Sim, display, this);
            clearSelection();

            createLineState = 0;
            createRouteState = "idle";
    }
    
    private byte[] convertToBytes() throws IOException {
       
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(bos)) {
            out.writeObject(Sim);
            out.close();
            return  bos.toByteArray();
        } 
    }

    private void convertFromBytes(Stack<byte[]> stack) throws IOException, ClassNotFoundException {
        if (!stack.isEmpty()){
            try {
                
                if (stack == CTRLZ){
                    CTRLY.push(convertToBytes());
                }
                else{
                    CTRLZ.push(convertToBytes());
                }
                byte[] pop = stack.pop();
                ByteArrayInputStream bis = new ByteArrayInputStream(pop);
                ObjectInput in = new ObjectInputStream(bis); 
                Sim = (Simulation) in.readObject();
                display.Sim = Sim;

                reloadInterface();

                in.close();
            } 
            catch (Exception e){
                
            }
        }
    }
    
    public void selectOnly(Boolean state){
            selectorToggleButton.setSelected(state);
            addAreteToggleButton.setEnabled(!state);
            addNodeToggleButton.setEnabled(!state);
            checkBoxStation.setEnabled(!state);
            buttonEditRoute.setEnabled(!state);
            mouseClickState = "selection";
            mouseClickStatePersistance = !state;
            Bouton_simuler.setEnabled(!state);
            spinMinTime.setEnabled(!state);
            spinTypeTime.setEnabled(!state);
            spinMaxTime.setEnabled(!state);
            buttonBesoins.setEnabled(!state);
            selectorToggleButton.setEnabled(!state);
            moveToggleButton.setEnabled(!state);
            menuCommandAjouterArete.setEnabled(!state);
            menuCommandAjouterCircuit.setEnabled(!state);
            menuCommandModCircuit.setEnabled(!state);
            menuCommandAjouterNoeud.setEnabled(!state);
            menuCommandDeplacerNoeud.setEnabled(!state);
            menuCommandSupprimer.setEnabled(!state);
            menuCommandLancerSim.setEnabled(!state);
            menuCommandAnalResults.setEnabled(!state);
            menuUndo.setEnabled(!state);
            menuRedo.setEnabled(!state);
    }
    
    public void selectRectangle(){
        if (!simTimer.running){
            display.selectRectangle();

            //Nodes
            for (Node n: Sim.listNodes){
                if(display.selectionRectangle.contains(n.getPositionX(), n.getPositionY())){
                    if (!selectedNode.contains(n)){
                        selectedNode.add(n);
                        selectedObject = "Noeud";
                    }
                }
            }
            if (!selectedNode.isEmpty()){
                            selectedNodeRoutine();
                        }
            for (Line l: Sim.listLines){
                if(display.selectionRectangle.intersectsLine(l.line)){
                  

                    if (!selectedLine.contains(l)){
                        selectedLine.add(l);
                        
                    }
                }
            }
             if (!selectedLine.isEmpty()){
                selectedLineRoutine();
            }
            if (selectedNode.size() + selectedLine.size() >1 ){
                selectedObject = "multiples";
            }
           
        }
    }
    
    public void clearSelection(){
        selectedBus = null;
        selectedLine.clear();
        selectedNode.clear();
        selectedObject = "none";
        selectedRoute = null;
        selectedDirections = null;
        display.clearSelection();   
        createRouteState = "idle";
        display.selectionRectangle.setRect(0, 0, 0, 0);
        createRoute();
        

    }
    
    public void createRouteNextState(){
        
        if (createRouteState == "select" ){
            //if (!selectedNode.isEmpty()){
                //if (selectedNode.get(0).isStation && Sim.newRoute.route.size()>1){
                if (Sim.newRoute.route.size()>1){
                    createRouteState = "dialog";
                    listSourcesModel.removeAllElements();
                    listPossibleSourcesModel.removeAllElements();
                    for (Node n: Sim.newRoute.route)
                    if (n.isStation ){
                        if (n != Sim.newRoute.getNodeFromIndex(Sim.newRoute.getNumberOfNodes()-1)){
                            listPossibleSourcesModel.addElement(n.getName());
                        }

                    }
                    Sim.newRoute.updateIfLoop();
                    if (Sim.newRoute.canLoop){
                         listPossibleSourcesModel.addElement(Sim.newRoute.route.get(0).getName());
                          checkLoop.setEnabled(true);
                    }

                    else{
                        checkLoop.setEnabled(false);
                    }
                }
                else{
                    createRouteState = "reset";
                }
            //}
            //else{
             //   createRouteState = "reset";
            //}

        }

        if (createRouteState == "idle" && Sim.getNodeQuantity() >= 2){
            clearSelection();
            Sim.newRoute = new Route();
            createRouteState = "select";

        }
    }
    
    public void createRoute(){
        switch (createRouteState){

        case "idle":
            break;
        case "reset": // reset
           createRouteState = "idle";
           Print.setText("Création de circuit annulée");
           Bouton_circuit_add.setText("Ajouter");
           selectedRoute = null;
            selectOnly(false);
           break;
            
        case  "dialog":
            display.clearSelection();
            //dialog
            selectedRoute = Sim.newRoute;
            createRouteState = "Creation";
            Bouton_circuit_add.setText("Ajouter");
            Dialog_circuit.setVisible(true);
            //
            
            // cas ou on pese sur le X du dialog
            if (createRouteState == "reset"){
                createRoute();
            }
            break;
            
        case  "select":
        {
            try {
                CTRLZ.push(convertToBytes());
            } catch (IOException ex) {
                Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
           selectOnly(true);

            Print.setText("Veuillez sélectionner la station 1 du circuit.");
            Sim.newRoute.route.clear();
            Bouton_circuit_add.setText("Terminer");
            break;        
            
        case "Creation":
           if (Sim.newRoute.route.size()>1 && Sim.newRoute.route.get(Sim.newRoute.route.size()-1).isStation ==true && Sim.routeNumberAvailable((int)spin_num.getValue())){
             selectedRoute = Sim.addNewRoute((int)spin_num.getValue(),(int)maxBus.getValue() );
             selectedRoute.updateIfLoop();

             selectedObject = "Circuit";
             Sim.newRoute = null;
             display.clearSelection();
             
             display.selectRoute(selectedRoute);

             listRoutesModel.addElement(selectedRoute.getNumber());
             listRoutes.setSelectedIndex(listRoutes.getLastVisibleIndex());
             Print.setText("Circuit "+ selectedRoute.getNumber()+ " créé avec succès!");
             buttonBesoins.setEnabled(true);
             display.repaint();
           }
           else{
               Print.setText("Circuit invalide!");
               Bouton_circuit_add.setText("Ajouter");
           }
            selectOnly(false);
            createRouteState = "idle";

           break;
        case "Edit":
            if (!Sim.routeNumberAvailable((int) spin_num.getValue()) && selectedRoute.getNumber() !=(int) spin_num.getValue()){
                Print.setText("Ce numéro de circuit est déjà utilisé");
                createRouteState = "select";
                break;
            }
            int i = listRoutesModel.getIndexOf(selectedRoute.getNumber());
            selectedRoute.setNumber((int)spin_num.getValue());
            selectedRoute.setMaxBus((int) maxBus.getValue());
            listRoutesModel.removeElementAt( i);

            listRoutesModel.insertElementAt(selectedRoute.getNumber(), i);
            createRouteState = "idle";
        default:
            break;
        }
    }
    
    public void createNode(int x, int y){
          try{
       CTRLZ.push(convertToBytes());
        }     
         catch (IOException ex) {
            Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
        }
        Line aSelect;
           
        aSelect = null;
        if(selectedNode.isEmpty()){
            aSelect = Sim.getLineFromPosition(x,y); 
        }
        if(aSelect != null){
            selectedNode.add(Sim.splitLine(aSelect, x, y));
            selectedObject = "Noeud";
            Print.setText("Noeud selectionne!");
            display.selectNode(selectedNode);
        }
        //Nouveau point
        else if (selectedNode.isEmpty()){
            selectedNode.add(Sim.addNode(x, y));
            selectedObject = "Noeud";
            Print.setText("Noeud selectionne!");
            display.selectNode(selectedNode);
        }
      
    }
    
    public void createLine(int x, int y){
       

        switch (createLineState){
            case 0:
        {
            try {
                CTRLZ.push(convertToBytes());
            } catch (IOException ex) {
                Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                if(selectedNode.isEmpty()){
                    Line l = Sim.getLineFromPosition(x,y);
                    if (l != null){
                        selectedLine.add(l); 
                    }
                }
                //point sur une ligne
                if(!selectedLine.isEmpty()){
                    nodeBuffer = Sim.splitLine(selectedLine.get(0), x, y);
                }
                //Nouveau point
                else if (selectedNode.isEmpty()){
                    nodeBuffer = Sim.addNode(x, y);

                }
                //point existant
                else{
                    nodeBuffer = selectedNode.get(0);
                    selectedNode.clear();
                }
                    
                createLineState = 1;
                break;
                
            case 1:
                Node noeud1 = nodeBuffer;
                Node noeud2;

                if (!selectedNode.isEmpty()){
                    noeud2 = selectedNode.get(0);
                }
                else{
                    Line l = Sim.getLineFromPosition(x,y);
                    if (l != null){
                        selectedLine.add(Sim.getLineFromPosition(x,y)); 
                    }
                    if (!selectedLine.isEmpty()){
                        noeud2 = Sim.splitLine(selectedLine.get(0), x, y);
                    }
                    else{
                        noeud2 = new Node(x,y);
                    }
                }
                selectedLine.add(Sim.addLine(noeud1, noeud2));
                if (selectedLine.isEmpty()){
                    Print.setText("Veuillez sélectionner un noeud différent du premier.");
                    createLineState = 0;
                    break;
                }
                selectedObject = "Noeud";
                selectedNode.add(noeud2);
                nodeBuffer = noeud2;
                selectedLine.clear();
                createLineState = 1;
                //fenetre_sim1.createLineTemp = null;
                display.selectNode(selectedNode);
                /*if (mouseClickStatePersistance == false){
                    mouseClickState = "selection";
                }
                */
                break;
            default:
                break;
        }
    }
    
    public void delete(){
        try {
            CTRLZ.push(convertToBytes());
        } catch (IOException ex) {
            Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
        }
           
           if (selectedObject == "Noeud" || selectedObject == "Station" ) {
                Sim.deleteNode(selectedNode);
           }
           else if (selectedObject == "Line"){
               
               if(Sim.deleteLine(selectedLine)){
                   Print.setText("Arête supprimée avec succès.");
               }
               else{
                    Print.setText("L'Arête appartient à un circuit!");
               }
               
           }
           else if (selectedObject == "multiples" ){
               Sim.deleteNode(selectedNode);
               Sim.deleteLine(selectedLine);
           }
           else if (selectedObject == "Circuit"){
            
            int i = listRoutes.getSelectedIndex();
            if (i >= 0){


                int numero_circuit = selectedRoute.getNumber();
                if (Sim.deleteRoute(selectedRoute)){
                
                    listRoutesModel.removeElementAt(i);
                    selectedRoute = null;
                    Print.setText("Circuit "+numero_circuit+ " supprimé avec succès.");
                }
                else{
                    Print.setText("Ce circuit appartient à un besoin en transport!");
                }

            }
 
            }
            else if (selectedObject == "Directions"){
                int indexDirections = listDirections.getSelectedIndex();
                listDirectionsModel.removeElementAt(indexDirections);
                Sim.deleteDirections(selectedDirections);
                selectedDirections = null;
            }
            else{
            
                    Print.setText("Il n'y a rien de selectionné à supprimer.");
                

            }
        
        selectedObject = null;
        display.clearSelection();
        display.repaint();
    }
    
    public void displayTime(){
        sim_time.setText(""+Sim.freq*Sim.count/1000);
    }
    
    private boolean cursorIsOnObject(int x, int y){
        if (Sim.getNodeFromPosition(x,y, display.nodeSize, display.stationSize) != null){
            return true;
        }
        if (Sim.getLineFromPosition(x,y) != null){
            return true;
        }
        if (Sim.getBusFromPosition(x, y, display.imgBusSize) != null){
            return true;
        }
        return false;
    }
    
    private void selectedNodeRoutine(){
        selectedObject = "Noeud";
        Print.setText("Noeud selectionne!");
        textStationName.setText("-");
        checkBoxStation.setEnabled(true);
        checkBoxStation.setSelected(selectedNode.get(0).isStation);
        display.selectNode(selectedNode);
        //if (selectedNode.get(0).isStation){
            selectedObject = "Station";
            Print.setText("Station selectionnée: "+selectedNode.get(0).getName()+ "  Nombre de routes:"+selectedNode.get(0).getNumberOfRoutes());
            textStationName.setText(selectedNode.get(0).getName());

        //}
    }
    
    private void selectedLineRoutine(){ 
        
        selectedObject = "Line";
        Print.setText("Arête sélectionnée");
        display.selectLine(selectedLine);
        applyLine.setEnabled(true);
        Line L = selectedLine.get(0);
        spinMinTime.setValue(L.distance/L.minSpeed);
        spinMaxTime.setValue(L.distance/L.maxSpeed);
        spinTypeTime.setValue(L.distance/L.typeSpeed);
        
    }
    
    private void addNodeNewRoute(){
        
        if (!selectedNode.isEmpty()){
            Boolean isPossible = Sim.addNodeToNewRoute(selectedNode.get(0));
           
            if (isPossible ){
                Print.setText("Noeud ajoutée (" +selectedNode.get(0).getName()+  ") au parcours!");
                display.selectNode(selectedNode);
                
            }
            else{
                Print.setText("Veuillez sélectionner un noeud valide!");
            }
        }
        
         if (Sim.newRoute.route.size()>1){
             display.selectRoute(Sim.newRoute);

        }
    }
    
    private void moveNodeRoutine(){
        try {
            CTRLZ.push(convertToBytes());
        } catch (IOException ex) {
            Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!selectedNode.isEmpty())
            {
                for (Node n: selectedNode){
                    n.setPositionX(n.getPositionX() - (int)display.selectionRectangle.getCenterX() + pressedX);
                    n.setPositionY(n.getPositionY() - (int)display.selectionRectangle.getCenterY() + pressedY);
                    Sim.updateLines(n);
                }
            }
            display.selectionRectangle.x = display.selectionRectangle.x -(int)display.selectionRectangle.getCenterX() + pressedX;
            display.selectionRectangle.y = display.selectionRectangle.y- (int)display.selectionRectangle.getCenterY() + pressedY;
            if (mouseClickStatePersistance == false){
                mouseClickState = "selection";
            }
    }
    
    private void SimulateButtonAction(){
        if (!simTimer.running){
            timeJSpinnerStart.setTime();
            timeJSpinnerStop.setTime();
            timeJSpinnerStartSim.setTime();
            int deltaHours = timeJSpinnerStop.getHours() - timeJSpinnerStart.getHours();
            if (deltaHours < 0){
                deltaHours+= 24;
            }
            int deltaMinutes = timeJSpinnerStop.getMinutes()- timeJSpinnerStart.getMinutes();
            
            deltaMinutes += deltaHours*60;
            
            int deltaHoursStart = timeJSpinnerStartSim.getHours() - timeJSpinnerStart.getHours();
            if (deltaHoursStart < 0){
                deltaHoursStart+= 24;
            }
            int deltaMinutesStart = timeJSpinnerStartSim.getMinutes()- timeJSpinnerStart.getMinutes();
            
            deltaMinutesStart += deltaHoursStart*60;
            
            if (deltaMinutes > 0 && deltaMinutesStart < deltaMinutes){
                System.out.println("Temps total :"+deltaMinutes+"  Temps départ: "+deltaMinutesStart);
                simTimer.setSimSpeed(simulation_speed.getValue()/4);
                simTimer.start(deltaMinutes, deltaMinutesStart, TICK_TIME, skipBox.isSelected(),(int) spinNumberOfSimulations.getValue());
                
            }
            else{
                Print.setText("La config des temps est en erreur!");
            }
        }

        
        
    }
    
    private void noneSelectedRoutine(){
        Print.setText("Vous n'avez rien sélectionné");
        textStationName.setText("-");  
        checkBoxStation.setSelected(false);
        applyLine.setEnabled(false);
    }
    
    private void selectedBusRoutine(){
        selectedObject = "Bus";
        Print.setText("Bus sélectionné, appartient au circuit "+selectedBus.getRoute().getNumber()+" et contient "+selectedBus.listPassenger.size()+ " passagers!");
        display.selectBus(selectedBus);
    }
    
    private void EditRouteButtonAction(){
        if (selectedRoute != null){

            createRouteState = "Edit";
            listSourcesModel.removeAllElements();
            listPossibleSourcesModel.removeAllElements();

            for (Route.Source s: selectedRoute.listSources){
                listSourcesModel.addElement(s.originNode.getName());
            }

            for (Node n: selectedRoute.route){
                if (n.isStation && selectedRoute.getNumberOfNodes() != selectedRoute.route.lastIndexOf(n)+1){
                    listPossibleSourcesModel.addElement(n.getName());
                }
            }
            spin_num.setValue(selectedRoute.getNumber());
            maxBus.setValue(selectedRoute.getMaxBus());
            Dialog_circuit.setVisible(true);
        }
    }
    
    private void displayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayMousePressed
         //coordonnées du clic
        
        checkLoop.setEnabled(false);
        checkLoop.setSelected(false);
       
        pressedX = display.getGridPositionX(evt.getX());
        pressedY = display.getGridPositionY(evt.getY());
        
        // RIGHT CLICK
        if (SwingUtilities.isRightMouseButton(evt)){
            dragMove = true;

            if (createLineState == 1){
                createLineState = 0;
            }
        }
        
        // LEFT CLICK
        else if (SwingUtilities.isLeftMouseButton(evt)){
            /* -------------- Selection d'un Noeud ------------- */
            if (createRouteState == "idle" && mouseClickState == "selection"){
                 dragSelect = true;
            }
            int size = display.nodeSize;//   
            int size_s = display.stationSize; //taille d'une station
            int size_b = display.imgBusSelectedSize;

            if (mouseClickState.matches("selection|ajoutArete|ajoutNoeud")){
                selectedNode.clear();
                selectedLine.clear();
                display.clearSelection();
                display.selectionRectangle.setRect(pressedX, pressedY, 0, 0);
                if (simTimer.running){
                    selectedBus = Sim.getBusFromPosition(pressedX, pressedY, display.imgBusSize);
                    if (selectedBus != null){
                        selectedBusRoutine();
                    }

                }

                else{
                    //va chercher la station correspondant au clic
                    Node n = Sim.getNodeFromPosition(pressedX,pressedY, size, size_s);
                    if (n != null){
                        selectedNode.add(n);
                    }

                    if (!selectedNode.isEmpty()){
                        selectedNodeRoutine();
                    }
                    // les nodes ont priorité de sélection sur les arêtes
                    /* -------------- Sélection d'une arête ------------- */
                    else{
                        Line l = Sim.getLineFromPosition(pressedX, pressedY);
                        if(l !=null){
                          selectedLine.add(l);
                        }
                        if (!selectedLine.isEmpty()){
                             selectedLineRoutine();
                        }
                        else{
                            noneSelectedRoutine();   
                        }
                    }
                }
            }
            /* -------------- Ajout de station à un circuit ------------- */
            if (createRouteState == "select"){
                addNodeNewRoute();
            }
            /* -------------- Deplacer station ------------- */
            if (mouseClickState == "deplacerNoeud"){
               moveNodeRoutine();
            }
            /* -------------- Creation arete ------------- */
            if (mouseClickState == "ajoutArete"){
                createLine(pressedX, pressedY);
            }
            /* -------------- Creation noeud ------------- */
            if (mouseClickState == "ajoutNoeud"){
                createNode(pressedX, pressedY);
                if (mouseClickStatePersistance == false){
                        mouseClickState = "selection";
                }
            }
        }
        display.repaint();
    }//GEN-LAST:event_displayMousePressed
    
    private void displayMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayMouseMoved
       
        int x =  display.getGridPositionX(evt.getX());
        int y =  display.getGridPositionY(evt.getY());

        displayLabelCoordonnees.setText("X:  "+x +" m"+"  Y:  "+ y +" m");
        
        if (createLineState == 1){
            display.createLineTemp.setLine(pressedX, pressedY, x, y);
            display.repaint();
        }

        if (cursorIsOnObject(x, y)){
            setCursor(handCursor);
        } else{
            setCursor(defaultCursor);
        }

    }//GEN-LAST:event_displayMouseMoved
    
    private void ok_dialog_circuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_dialog_circuitActionPerformed
        // TODO add your handling code here:
        if (!Sim.routeNumberAvailable((int)spin_num.getValue()) && selectedRoute.getNumber() !=(int)spin_num.getValue()){
            Print.setText("Numéro de circuit déjà utilisé!");
        }  
        else{
            if (createRouteState == "Edit" ||createRouteState == "Creation"){
                createRoute();
            }
            circuitMenuApplyChanges();
            Dialog_circuit.dispose();
        }
    }//GEN-LAST:event_ok_dialog_circuitActionPerformed

    private void Dialog_circuitWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Dialog_circuitWindowClosing
        // TODO add your handling code here:
        createRouteState ="reset"; 
    }//GEN-LAST:event_Dialog_circuitWindowClosing
    
 
    private final int TICK_TIME = 33; // ms
    private void Bouton_simulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_simulerActionPerformed
        SimulateButtonAction();
    }//GEN-LAST:event_Bouton_simulerActionPerformed

    private void Bouton_arreterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_arreterActionPerformed
        // TODO add your handling code here:
        if (simTimer.running){
            simTimer.stop();
            
            display.repaint();
        }
         
    }//GEN-LAST:event_Bouton_arreterActionPerformed

    private void simulation_speedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_simulation_speedStateChanged
        // TODO add your handling code here:
        simTimer.setSimSpeed(simulation_speed.getValue()/4);
    }//GEN-LAST:event_simulation_speedStateChanged

    private void jInternalFrame1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jInternalFrame1MouseEntered
        
    }//GEN-LAST:event_jInternalFrame1MouseEntered

    private void menuCommandAjouterNoeudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAjouterNoeudActionPerformed
        mouseClickState = "ajoutNoeud";
        mouseClickStatePersistance = false;
        Print.setText("Clickez pour ajouter un noeud");
    }//GEN-LAST:event_menuCommandAjouterNoeudActionPerformed

    private void menuOptionSeeCoordsDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOptionSeeCoordsDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuOptionSeeCoordsDisplayActionPerformed

    private void menuCommandDeplacerNoeudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandDeplacerNoeudActionPerformed
        mouseClickState = "deplacerNoeud";
        Print.setText("Cliquez pour déplacer l'object selectioné");
    }//GEN-LAST:event_menuCommandDeplacerNoeudActionPerformed

    private void menuCommandAjouterAreteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAjouterAreteActionPerformed
        mouseClickState = "ajoutArete";
        mouseClickStatePersistance = false;
        Print.setText("Selectionnez/créez le noeud de départ");
    }//GEN-LAST:event_menuCommandAjouterAreteActionPerformed

    private void menuCommandSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandSupprimerActionPerformed
        delete();
    }//GEN-LAST:event_menuCommandSupprimerActionPerformed

    private void displayMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_displayMouseWheelMoved
        // TODO add your handling code here:
        
        display.updateScale(evt.getWheelRotation());
    }//GEN-LAST:event_displayMouseWheelMoved

    private void displayMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayMouseDragged
        // TODO add your handling code here:
        int x =  display.getGridPositionX(evt.getX());
        int y =  display.getGridPositionY(evt.getY());
        
        if (dragSelect){
            if (x < pressedX){
                if (y < pressedY){
                    display.selectionRectangle.setRect(x, y, pressedX-x, pressedY-y);
                }
                else{
                    display.selectionRectangle.setRect(x, pressedY, pressedX-x, y-pressedY);
                }
            }
            else{
                if (y < pressedY){
                    display.selectionRectangle.setRect(pressedX, y, x-pressedX, pressedY-y);
                }
                else{
                    display.selectionRectangle.setRect(pressedX, pressedY, x-pressedX, y-pressedY);
                }
            }
            display.repaint();
        }
         if (dragMove){
             int moveX =  pressedX - x;
             int moveY =  pressedY -  y;
             display.setCenterPosition(moveX, moveY);
        }
    }//GEN-LAST:event_displayMouseDragged

    private void displayMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayMouseReleased
        // TODO add your handling code here:
       
        
        if (SwingUtilities.isRightMouseButton(evt)){
            dragMove = false;
            display.createLineTemp.setLine(0, 0, 0, 0);
            repaint();
        }
        if (SwingUtilities.isLeftMouseButton(evt)){
            if (dragSelect){
                selectRectangle();
            }
            dragSelect = false;
            
            //fenetre_sim1.selectionRectangle.setRect(0, 0, 0, 0);
            repaint();
        }
    }//GEN-LAST:event_displayMouseReleased

    private void sim_timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sim_timeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sim_timeActionPerformed

    private void buttonRecenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRecenterActionPerformed
        // TODO add your handling code here:
        display.resetDisplay();
        
    }//GEN-LAST:event_buttonRecenterActionPerformed

    private void selectorToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorToggleButtonActionPerformed
        clearSelection();
        mouseClickState = "selection";
        mouseClickStatePersistance = false;
        Print.setText("Clickez pour ajouter un noeud");
        
    }//GEN-LAST:event_selectorToggleButtonActionPerformed

    private void addNodeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodeToggleButtonActionPerformed
        clearSelection();
        mouseClickState = "ajoutNoeud";
        mouseClickStatePersistance = true;
        Print.setText("Clickez pour ajouter un noeud");
        
    }//GEN-LAST:event_addNodeToggleButtonActionPerformed

    private void addAreteToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAreteToggleButtonActionPerformed
        clearSelection();
        mouseClickStatePersistance = true;
        Print.setText("Ajoutez une arête");
        mouseClickState = "ajoutArete";
    }//GEN-LAST:event_addAreteToggleButtonActionPerformed

    private void buttonBesoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBesoinsActionPerformed
        // TODO add your handling code here:
        
        if (Sim.getRouteQuantity()>0){
            try {
                 CTRLZ.push(convertToBytes());
            } catch (IOException ex) {
                Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
            }
            Sim.newDirections = new Directions();
            startComboBox.setEnabled(true);
            DefaultComboBoxModel startComboBoxModel = new DefaultComboBoxModel();
            for(Node n: Sim.listNodes){

                if(n.isStation && n.getNumberOfRoutes()>0){
                    startComboBoxModel.addElement(n.getName());
                }
                
            }
            startComboBox.setModel(startComboBoxModel);
            
            Dialog_besoin_transport.setVisible(true);
            
        }
        else{
            Print.setText("Il n'y a aucun circuit de créé!");
        }
        
    }//GEN-LAST:event_buttonBesoinsActionPerformed

    private void startComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startComboBoxActionPerformed
        // TODO add your handling code here:
        if (startComboBox.isEnabled()){
           String startStationName = (String)startComboBox.getSelectedItem();
           Node n = Sim.getNodeFromName(startStationName);
           display.clearSelection();
           selectedNode.clear();
           selectedNode.add(n);
           display.selectNode(selectedNode);
           DefaultComboBoxModel routesComboBoxModel = new DefaultComboBoxModel();
            //System.out.println(n.listRoutes.size());
            for(Route r: n.listRoutes){
                if (!(r.route.lastIndexOf(n) == r.getNumberOfNodes()-1 && !r.isLoop )){
                    routesComboBoxModel.addElement(r.getNumber());
               }
            }
            routesComboBox.setModel(routesComboBoxModel);
            routesComboBox.setEnabled(true);
            endComboBox.setEnabled(false);
        }
        
    }//GEN-LAST:event_startComboBoxActionPerformed

    private void addSubRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubRouteButtonActionPerformed
        // TODO add your handling code here:
        if(endComboBox.isEnabled()){
            Route r = Sim.getRouteFromNumber((int)routesComboBox.getSelectedItem());
            String startName =(String)startComboBox.getSelectedItem();
            String endName =(String)endComboBox.getSelectedItem();
            Sim.newDirections.addSubRoute(r, r.getNodeIndexFromName(startName),r.getNodeIndexFromName(endName));
            listSubRoutesModel.addElement("Circuit "+r.getNumber()+": "+startName+" à "+endName);
            DefaultComboBoxModel startComboBoxModel = new DefaultComboBoxModel();
            endComboBox.setEnabled(false);
            routesComboBox.setEnabled(false);
            startComboBoxModel.addElement((String)endComboBox.getSelectedItem());
            startComboBox.setModel(startComboBoxModel);
            okDirections.setEnabled(true);
        }
    }//GEN-LAST:event_addSubRouteButtonActionPerformed

    private void routesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routesComboBoxActionPerformed
        // TODO add your handling code here:
        
        if (routesComboBox.isEnabled()){
            int routeNumber = (int)routesComboBox.getSelectedItem(); 
            Route r = Sim.getRouteFromNumber(routeNumber);
            display.selectRoute(r);
            DefaultComboBoxModel endComboBoxModel = new DefaultComboBoxModel();
            Boolean startAdding =false;
            String startStationName = (String)startComboBox.getSelectedItem();
            Node startStation = Sim.getNodeFromName(startStationName);
            int numberAdded = 0;
            for(Node n: r.route){
                if (r.isLoop && n.isStation && n != startStation && n != Sim.newDirections.getStartPoint() && n != r.route.get(0)){
                    endComboBoxModel.addElement(n.getName());
                    numberAdded++;
                }
                else{
                    if (startAdding && n.isStation){

                            endComboBoxModel.addElement(n.getName());
                            numberAdded++;

                    }
                    if (n.isStation && n == startStation){
                        startAdding = true;

                    }
                }
            }
            /*for(Node n: r.route){
                if (startAdding && n.isStation){
                  if (n != startStation && n != Sim.newDirections.getStartPoint()){
                        endComboBoxModel.addElement(n.getName());
                        numberAdded++;
                    }
                }
                if (n.isStation && n == startStation){
                    startAdding = true;
                    
                }
            }*/
            endComboBox.setModel(endComboBoxModel);
            if (numberAdded>0){
                endComboBox.setEnabled(true);
            }
        }   
    }//GEN-LAST:event_routesComboBoxActionPerformed

    private void endComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endComboBoxActionPerformed
        // TODO add your handling code here:
        addSubRouteButton.setEnabled(true);
        String endStationName = (String)endComboBox.getSelectedItem();
        selectedNode.clear();
        selectedNode.add(Sim.getNodeFromName(endStationName));
        display.clearSelection();
        display.selectNode(selectedNode);
    }//GEN-LAST:event_endComboBoxActionPerformed

    private void okDirectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okDirectionsActionPerformed
        // TODO add your handling code here:
        if (listSubRoutesModel.getSize() != 0){
            Sim.newDirections.setTimeFirstStart((int)spinFirstStart.getValue());
            Sim.newDirections.setFrequency((int)spinTypeMinPassenger.getValue(),(int)spinTypeMaxPassenger.getValue(),(int)spinTypeFreqPassenger.getValue());
            listDirectionsModel.addElement(Sim.newDirections.getStartPoint().getName()+" à "+Sim.newDirections.getEndPoint().getName());
            Sim.addDirection();
            okDirections.setEnabled(false);
            Dialog_besoin_transport.dispatchEvent(new WindowEvent(Dialog_besoin_transport, WindowEvent.WINDOW_CLOSING));
        }
       
    }//GEN-LAST:event_okDirectionsActionPerformed

    private void Dialog_besoin_transportWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Dialog_besoin_transportWindowClosing
        // TODO add your handling code here:
         listSubRoutesModel.removeAllElements();
    }//GEN-LAST:event_Dialog_besoin_transportWindowClosing

    private void checkLoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLoopActionPerformed
        // TODO add your handling code here:
        if (selectedRoute != null){
            selectedRoute.isLoop = checkLoop.isSelected();
        }
    }//GEN-LAST:event_checkLoopActionPerformed

    private void buttonSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSourceActionPerformed
        // TODO add your handling code here:
        String name = (String) comboSource.getSelectedItem();
        Node n = Sim.getNodeFromName(name);
        listSourcesModel.addElement(name);
        int typeFreq = (Integer)spinFreqType.getValue();
        int minFreq = (Integer)spinFreqMin.getValue();
        int maxFreq = (Integer)spinFreqMax.getValue();
        int timeFirstStart = (Integer)spin_t.getValue();

        selectedRoute.addSource(n, timeFirstStart, minFreq, maxFreq, typeFreq);
        
    }//GEN-LAST:event_buttonSourceActionPerformed

    private void listSourcesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSourcesMouseClicked
        // TODO add your handling code here:
        int i = listSources.getSelectedIndex();
        String name = (String) listSources.getSelectedValue();
        Node n = Sim.getNodeFromName(name);
        display.clearSelection();
        selectedNode.clear();
        selectedNode.add(n);
        display.selectNode(selectedNode);
        
        if (i >= 0){
            Route.Source s = selectedRoute.listSources.get(i);
            spin_t.setValue(s.timeFirstStart);
            spinFreqType.setValue(s.typeFrequency);
            spinFreqMax.setValue(s.maxFrequency);
            spinFreqMin.setValue(s.minFrequency);
        }
        
    }//GEN-LAST:event_listSourcesMouseClicked

    private void listSourcesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSourcesValueChanged
        // TODO add your handling code here:
        listSourcesMouseClicked(null);
    }//GEN-LAST:event_listSourcesValueChanged

    private void circuitMenuApplyChanges(){
        int i = listSources.getSelectedIndex();
        if (i >= 0){
            Route.Source s = selectedRoute.listSources.get(i);
            s.setTimeFirstStart((int)spin_t.getValue());
            s.typeFrequency = (int) spinFreqType.getValue();
            s.minFrequency = (int) spinFreqMin.getValue();
            s.maxFrequency = (int) spinFreqMax.getValue();
        }
    }
    private void buttonApplySourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplySourceActionPerformed
        // TODO add your handling code here:
        circuitMenuApplyChanges();
    }//GEN-LAST:event_buttonApplySourceActionPerformed

    private void buttonDeleteSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteSourceActionPerformed
        // TODO add your handling code here:
        int i = listSources.getSelectedIndex();
        if (i >= 0){
            listSourcesModel.removeElementAt(i);
            selectedRoute.listSources.remove(i);
        }
    }//GEN-LAST:event_buttonDeleteSourceActionPerformed

    private void buttonEditRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditRouteActionPerformed
        EditRouteButtonAction();
    }//GEN-LAST:event_buttonEditRouteActionPerformed

    private void Bouton_circuit_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_circuit_addActionPerformed
        // TODO add your handling code here:

        createRouteNextState();
        createRoute();
    }//GEN-LAST:event_Bouton_circuit_addActionPerformed

    private void listRoutesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listRoutesValueChanged
        // TODO add your handling code here:

        int i = listRoutes.getSelectedIndex();

        if (i>=0){

            int number =(int) listRoutesModel.getElementAt(i);
            selectedRoute = Sim.getRouteFromNumber(number);
            selectedObject = "Circuit";
            Print.setText("Circuit sélectionné: "+selectedRoute.getNumber());
            display.clearSelection();
            display.selectRoute(selectedRoute);
            if (selectedRoute.canLoop){
                checkLoop.setEnabled(true);
                checkLoop.setSelected(selectedRoute.isLoop);
            }
            else{
                checkLoop.setEnabled(false);
                checkLoop.setSelected(selectedRoute.isLoop);
            }
        }
        display.repaint();
    }//GEN-LAST:event_listRoutesValueChanged

    private void listRoutesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listRoutesMouseClicked
        // TODO add your handling code here:
        listRoutesValueChanged(null);
    }//GEN-LAST:event_listRoutesMouseClicked

    private void listDirectionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listDirectionsMouseClicked
        // TODO add your handling code here:

        int i = listDirections.getSelectedIndex();

        if (i>=0){

            selectedDirections = Sim.listDirections.get(i);
            selectedObject = "Directions";
            Print.setText("Besoin en transport sélectionné: "+selectedDirections.getStartPoint().getName()+ " à "+selectedDirections.getEndPoint().getName());
            display.clearSelection();
            display.selectDirections(selectedDirections);

        }
        display.repaint();
    }//GEN-LAST:event_listDirectionsMouseClicked

    private void listDirectionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listDirectionsValueChanged
        // TODO add your handling code here:
        listDirectionsMouseClicked(null);
    }//GEN-LAST:event_listDirectionsValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void applyLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyLineActionPerformed
        // TODO add your handling code here:
        
            try{
                spinMinTime.commitEdit();
                spinMaxTime.commitEdit();
                spinTypeTime.commitEdit();
                 CTRLZ.push(convertToBytes());
            }
            catch(Exception e){

            }
            for (Line l : selectedLine){
                // minutes to meters/minutes
                l.minSpeed = (l.distance) / (double)(Integer)spinMaxTime.getValue();
                l.maxSpeed = (l.distance) / (double)(Integer)spinMinTime.getValue();
                l.typeSpeed = (l.distance) / (double)(Integer)spinTypeTime.getValue();
                /*
                conversion KM/H to METER/MINUTES;
                l.minSpeed = (double)(Integer)spinMinSpeed.getValue()*1000/60;
                l.maxSpeed = (double)(Integer)spinMaxSpeed.getValue()*1000/60;
                l.typeSpeed = (double)(Integer)spinTypeSpeed.getValue()*1000/60;
                */
            }

        
    }//GEN-LAST:event_applyLineActionPerformed

    private void comboSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSourceActionPerformed
        // TODO add your handling code here:
        String name = (String) comboSource.getSelectedItem();
        Node n = Sim.getNodeFromName(name);
        display.clearSelection();
        selectedNode.clear();
        selectedNode.add(n);
        display.selectNode(selectedNode);
    }//GEN-LAST:event_comboSourceActionPerformed

    private void moveToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToggleButtonActionPerformed
        // TODO add your handling code here:
        mouseClickStatePersistance = true;
        Print.setText("Déplacer la sélection");
        mouseClickState = "deplacerNoeud";
    }//GEN-LAST:event_moveToggleButtonActionPerformed

    private void menuCommandEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandEnregistrerActionPerformed
        // TODO add your handling code here:
    try
      {
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Serialized Simulation File","ser"));
        fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
        fc.setFileFilter(new FileNameExtensionFilter("Serialized Simulation File","ser"));

        if (fc.showSaveDialog(SimulatHeure.this) == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
               String filename = file.toString();
            if (!filename .endsWith(".ser"))
                 filename += ".ser";
                 file = new File(filename);
            FileOutputStream fileOut = new FileOutputStream(file);
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(Sim);
            out.close();
            fileOut.close();
            System.out.printf("Serialized data is saved in "+filename);
       }
         
      }catch(Exception i)
      {
          i.printStackTrace();
          return;
      }
    }//GEN-LAST:event_menuCommandEnregistrerActionPerformed

    // method used to deep-copy object which implement "Serializable"
    // code fount @ http: //alvinalexander.com/java/java-deep-clone-example-source-code
    // author : Alvin Alexander. Thank you.
    private static Object deepClone(Object object) {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(object);
            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            return ois.readObject();
        }
        catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    
    private void menuCommandOuvrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandOuvrirActionPerformed
        // TODO add your handling code here:
        try
        {
            File file = null;
            JFileChooser fc = new JFileChooser();
            fc.addChoosableFileFilter(new FileNameExtensionFilter("Serialized Simulation File","ser"));
            fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
            int returnVal = fc.showOpenDialog(SimulatHeure.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fc.getSelectedFile();
            }
            
            FileInputStream fileIn = new FileInputStream(file);
            ObjectInputStream in = new ObjectInputStream(fileIn);
            Sim = (Simulation) in.readObject();
            reloadInterface();
            CTRLY.clear();
            CTRLZ.clear();
            in.close();
            fileIn.close();
      }
        catch(NullPointerException e){
            System.out.println("Vous n'avez pas sélectionné de fichier!");
            return;
        }
        catch(Exception i)
        {
           i.printStackTrace();
           return;
        }

    }//GEN-LAST:event_menuCommandOuvrirActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void menuCommandAjouterCircuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAjouterCircuitActionPerformed
        createRouteNextState();
        createRoute();
    }//GEN-LAST:event_menuCommandAjouterCircuitActionPerformed

    private void menuCommandModCircuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandModCircuitActionPerformed
        EditRouteButtonAction();
    }//GEN-LAST:event_menuCommandModCircuitActionPerformed

    private void menuCommandLancerSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandLancerSimActionPerformed
        SimulateButtonAction();
    }//GEN-LAST:event_menuCommandLancerSimActionPerformed

    private void menuCommandAnalResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAnalResultsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuCommandAnalResultsActionPerformed

    private void menuCommandStopperSimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandStopperSimActionPerformed
        // TODO add your handling code here:
                if (simTimer.running){
            simTimer.stop();
            display.repaint();
        }
    }//GEN-LAST:event_menuCommandStopperSimActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Dialog_circuit.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void skipBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_skipBoxActionPerformed

    private void menuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUndoActionPerformed
        try {
            // TODO add your handling code here:
            if (!simTimer.running){
                //oCTRLY.push(convertToBytes());
                convertFromBytes(CTRLZ);
            }
        } catch (IOException ex) {
            Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_menuUndoActionPerformed

    private void menuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuRedoActionPerformed
        try {
            // TODO add your handling code here:
            if (!simTimer.running){
                if (!CTRLY.isEmpty()){
                    convertFromBytes(CTRLY);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuRedoActionPerformed

/*
    Section relative to background edition
*/
    
    private void backgroundSelectorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundSelectorMenuItemActionPerformed
        //log("backgroundSelectorMenuItemActionPerformed()");
        if(!addBackgroundDialog.isVisible()){
            temporaryBgImage = (BackgroundImage)deepClone(savedBgImage);
            temporaryBgImage.setOriginalImage(savedBgImage.getOriginalImage());
            if(temporaryBgImage.enabled){
                bgEnabledToggle.setSelected(true);
                bgDisabledToggle.setSelected(false);
                enableBackgroundImageSelection();
            } else {
                bgEnabledToggle.setSelected(false);
                bgDisabledToggle.setSelected(true);
                disableBackgroundImageSelection();
            }
        }
        addBackgroundDialog.setVisible(true);
    }//GEN-LAST:event_backgroundSelectorMenuItemActionPerformed

    private void displayGridSelectMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayGridSelectMenuActionPerformed
        //log("displayGridSelectMenuActionPerformed()");
        if(displayGridSelectMenu.isSelected()){
            display.toggleGrid(true);
        } else {
            display.toggleGrid(false);
        }
    }//GEN-LAST:event_displayGridSelectMenuActionPerformed

    private void openBgImageFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBgImageFileButtonActionPerformed
     //log("openBgImageFileButtonActionPerformed()");
     try
        {
            File file = null;
            JFileChooser fc = new JFileChooser();
            fc.addChoosableFileFilter(new FileNameExtensionFilter("image file (png)","png"));
            fc.addChoosableFileFilter(new FileNameExtensionFilter("image file (jpeg)","jpeg"));
            fc.addChoosableFileFilter(new FileNameExtensionFilter("image file (jpg)","jpg"));
            fc.addChoosableFileFilter(new FileNameExtensionFilter("image file (gif)","gif"));
            fc.addChoosableFileFilter(new FileNameExtensionFilter("image file (bnp)","bnp"));
            fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
            int returnVal = fc.showOpenDialog(SimulatHeure.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = fc.getSelectedFile();
            }
            bgImageTitleLabel.setText(file.getName());
            Image img = ImageIO.read(file);
            temporaryBgImage.setOriginalImage(img);
            temporaryBgImage.enabled = true;
            temporaryBgImage.setRequireRescaling(true);
            temporaryBgImage.setScaleFactor(scaleAdjustSlider.getValue());
            display.setBackgroundImage(temporaryBgImage);
      }
        catch(NullPointerException e){
            //e.printStackTrace();
            return;
        }
        catch(Exception i)
        {
           i.printStackTrace();
           return;
        }
    }//GEN-LAST:event_openBgImageFileButtonActionPerformed

    private void cancelBgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBgButtonActionPerformed
        //log("cancelBgButtonActionPerformed()");
        savedBgImage.setRequireRescaling(true);
        display.setBackgroundImage(savedBgImage);
        addBackgroundDialog.setVisible(false);
    }//GEN-LAST:event_cancelBgButtonActionPerformed

    private void enableBackgroundImageSelection(){
        //log("enableBackgroundImageSelection()");
        openBgImageLabel.setEnabled(true);
        openBgImageFileButton.setEnabled(true);
        scaleAdjustLabel.setEnabled(true);
        bgImageTitleLabel.setEnabled(true);
        scaleAdjustSlider.setEnabled(true);
    }
    
    private void bgEnabledToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgEnabledToggleActionPerformed
        //log("bgEnabledToggleActionPerformed()");
        enableBackgroundImageSelection();
        temporaryBgImage.enabled = true;
        temporaryBgImage.setRequireRescaling(true);
        display.setBackgroundImage(temporaryBgImage);
    }//GEN-LAST:event_bgEnabledToggleActionPerformed

    private void disableBackgroundImageSelection(){
        //log("disableBackgroundImageSelection()");
        openBgImageLabel.setEnabled(false);
        openBgImageFileButton.setEnabled(false);
        scaleAdjustLabel.setEnabled(false);
        bgImageTitleLabel.setEnabled(false);
        scaleAdjustSlider.setEnabled(false);
    }
    
    private void bgDisabledToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bgDisabledToggleActionPerformed
        //log("bgDisabledToggleActionPerformed()");
        disableBackgroundImageSelection();
        temporaryBgImage.enabled = false;
        display.setBackgroundImage(temporaryBgImage);
    }//GEN-LAST:event_bgDisabledToggleActionPerformed

    private void applyChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyChangesButtonActionPerformed
        //log("applyChangesButtonActionPerformed()");
        savedBgImage = (BackgroundImage)deepClone(temporaryBgImage);
        savedBgImage.setOriginalImage(temporaryBgImage.getOriginalImage());
        addBackgroundDialog.setVisible(false);
    }//GEN-LAST:event_applyChangesButtonActionPerformed



    private void scaleAdjustSliderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scaleAdjustSliderMouseReleased
        //log("scaleAdjustSliderMouseReleased()");
        int val = scaleAdjustSlider.getValue();
        if(val == 0){val=1;}
        temporaryBgImage.setScaleFactor(val);
        //temporaryBgImage.setResizeQuality(Image.SCALE_FAST);
        temporaryBgImage.setRequireRescaling(true);
        display.setBackgroundImage(temporaryBgImage);
    }//GEN-LAST:event_scaleAdjustSliderMouseReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
                Boolean changes = false;
       if (selectedNode.get(0).isStation){
            if ( textStationName.getText() != selectedNode.get(0).getName() && Sim.getNodeFromName(textStationName.getText()) == null){

                selectedNode.get(0).setName(textStationName.getText());
                changes = true;
                listDirectionsModel.removeAllElements();
                for (Directions d: Sim.listDirections){
                    listDirectionsModel.addElement(d.getStartPoint().getName()+" à "+d.getEndPoint().getName());
                }
                Print.setText("Station selectionnée: " + selectedNode.get(0).getName());
            }
            else{
                Print.setText("Nom de station déjà utilisé");
            }
        }
            Boolean isStation = checkBoxStation.isSelected();
            if (isStation){
                if (Sim.addStation(selectedNode)){
                    textStationName.setText(selectedNode.get(0).getName());
                    selectedObject = "Station";
                    changes = true;
                }
            }
            else{
                
                if (Sim.deleteStation(selectedNode)){
                    textStationName.setText("-");
                    changes = true;
                }
            }
            
             if (changes){
                display.repaint();
                try {
                     CTRLZ.push(convertToBytes());
                } catch (IOException ex) {
                    Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
                }
             }
    }//GEN-LAST:event_jButton3ActionPerformed


    private void log(String st){
        System.out.print(st+"\n");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    UIManager.setLookAndFeel(new SyntheticaBlackEyeLookAndFeel());
                } catch (ParseException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
                }


                new SimulatHeure().setVisible(true);
           
            }
        });
    }
    

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bouton_arreter;
    private javax.swing.JButton Bouton_circuit_add;
    private javax.swing.JButton Bouton_simuler;
    private javax.swing.JDialog Dialog_besoin_transport;
    private javax.swing.JDialog Dialog_circuit;
    private javax.swing.JTextPane Print;
    private javax.swing.JToggleButton addAreteToggleButton;
    private javax.swing.JDialog addBackgroundDialog;
    private javax.swing.JToggleButton addNodeToggleButton;
    private javax.swing.JButton addSubRouteButton;
    private javax.swing.JButton applyChangesButton;
    private javax.swing.JButton applyLine;
    private javax.swing.JMenuItem backgroundSelectorMenuItem;
    private javax.swing.ButtonGroup bgActiveSelector;
    private javax.swing.JToggleButton bgDisabledToggle;
    private javax.swing.JToggleButton bgEnabledToggle;
    private javax.swing.JLabel bgImageTitleLabel;
    private javax.swing.JButton buttonApplySource;
    private javax.swing.JButton buttonBesoins;
    private javax.swing.JButton buttonDeleteSource;
    private javax.swing.JButton buttonEditRoute;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonRecenter;
    private javax.swing.JButton buttonSource;
    private javax.swing.JButton cancelBgButton;
    private javax.swing.JCheckBox checkBoxStation;
    private javax.swing.JCheckBox checkLoop;
    private javax.swing.JComboBox comboSource;
    private simulatheure.SimDisplay display;
    private javax.swing.JCheckBoxMenuItem displayGridSelectMenu;
    private javax.swing.JLabel displayLabelCoordonnees;
    private javax.swing.ButtonGroup editionButtonGroup;
    private javax.swing.JInternalFrame editionToolbox;
    private javax.swing.JComboBox endComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JInternalFrame jInternalFrame3;
    private javax.swing.JInternalFrame jInternalFrame4;
    private javax.swing.JInternalFrame jInternalFrame5;
    private javax.swing.JInternalFrame jInternalFrame6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JList listDirections;
    private javax.swing.JList listRoutes;
    private javax.swing.JList listSources;
    private javax.swing.JList listSubRoutes;
    private javax.swing.JSpinner maxBus;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JMenuItem menuCommandAjouterArete;
    private javax.swing.JMenuItem menuCommandAjouterCircuit;
    private javax.swing.JMenuItem menuCommandAjouterNoeud;
    private javax.swing.JMenuItem menuCommandAnalResults;
    private javax.swing.JMenuItem menuCommandDeplacerNoeud;
    private javax.swing.JMenuItem menuCommandEnregSous;
    private javax.swing.JMenuItem menuCommandEnregistrer;
    private javax.swing.JMenuItem menuCommandLancerSim;
    private javax.swing.JMenuItem menuCommandModCircuit;
    private javax.swing.JMenuItem menuCommandNouvDoc;
    private javax.swing.JMenuItem menuCommandOuvrir;
    private javax.swing.JMenuItem menuCommandStopperSim;
    private javax.swing.JMenuItem menuCommandSupprimer;
    private javax.swing.JMenu menuFolderAffichage;
    private javax.swing.JMenu menuFolderCircuit;
    private javax.swing.JMenu menuFolderEdition;
    private javax.swing.JMenu menuFolderFichier;
    private javax.swing.JMenu menuFolderSimulation;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeCircuitToolbox;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeCoordsDisplay;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeEditionToolbox;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeSimToolbox;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeTooltipsDisplay;
    private javax.swing.JMenuItem menuRedo;
    private javax.swing.JMenu menuSubfolderInformation;
    private javax.swing.JMenu menuSubfolderToolboxes;
    private javax.swing.JMenuItem menuUndo;
    private javax.swing.JToggleButton moveToggleButton;
    private javax.swing.JButton okDirections;
    private javax.swing.JButton ok_dialog_circuit;
    private javax.swing.JButton openBgImageFileButton;
    private javax.swing.JLabel openBgImageLabel;
    private javax.swing.JComboBox routesComboBox;
    private javax.swing.JLabel scaleAdjustLabel;
    private javax.swing.JSlider scaleAdjustSlider;
    private javax.swing.JToggleButton selectorToggleButton;
    private javax.swing.JTextField sim_time;
    private javax.swing.JSlider simulation_speed;
    private javax.swing.JCheckBox skipBox;
    private javax.swing.JSpinner spinFirstStart;
    private javax.swing.JSpinner spinFreqMax;
    private javax.swing.JSpinner spinFreqMin;
    private javax.swing.JSpinner spinFreqType;
    private javax.swing.JSpinner spinMaxTime;
    javax.swing.JSpinner spinMinTime;
    private javax.swing.JSpinner spinNumberOfSimulations;
    private javax.swing.JSpinner spinTypeFreqPassenger;
    private javax.swing.JSpinner spinTypeMaxPassenger;
    private javax.swing.JSpinner spinTypeMinPassenger;
    private javax.swing.JSpinner spinTypeTime;
    private javax.swing.JSpinner spin_num;
    private javax.swing.JSpinner spin_t;
    private javax.swing.JComboBox startComboBox;
    private javax.swing.JFormattedTextField textStationName;
    private simulatheure.TimeJSpinner timeJSpinnerStart;
    private simulatheure.TimeJSpinner timeJSpinnerStartSim;
    private simulatheure.TimeJSpinner timeJSpinnerStop;
    // End of variables declaration//GEN-END:variables
}
