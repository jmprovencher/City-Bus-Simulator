/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulatheure;

import Reseau.*;
import de.javasoft.plaf.synthetica.SyntheticaBlackEyeLookAndFeel;
import javax.swing.*;
import java.awt.Cursor;
import java.awt.event.WindowEvent;
import java.io.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/* TO DO LIST

*/

/**
 *
 * @author rem54
 */
public class SimulatHeure extends javax.swing.JFrame {

    /**
     * Creates new form SimulatHeure
     */
    public Simulation Sim;
    public List<Node> selectedNode;
    public Node nodeBuffer;
    public Route selectedRoute;
    public Line  selectedLine;
    public Directions selectedDirections;
    public int createLineState;
    public String selectedObject;
    public String createRouteState;
    public SimTimer simTimer;
    public Bus selectedBus;
    
    public DefaultComboBoxModel listRoutesModel;
    public DefaultComboBoxModel listSubRoutesModel;
    public DefaultComboBoxModel listDirectionsModel;
    public DefaultComboBoxModel listSourcesModel;
    public DefaultComboBoxModel listPossibleSourcesModel;
    
    private Cursor defaultCursor;
    private Cursor handCursor;
    private Cursor quadraArrowsCursor;
    private String mouseClickState;
    private Boolean mouseClickStatePersistance;
    private Boolean dragMove;
    private Boolean dragSelect;
    private int pressedX;
    private int pressedY;
    
    public SimulatHeure()  {

        initComponents();
        
        selectedNode = new ArrayList<Node>();
        
        Sim = fenetre_sim1.Sim;
        createRouteState = "idle";
        mouseClickState = "selection";
        mouseClickStatePersistance = true;
        listRoutesModel = new DefaultComboBoxModel();
        listSubRoutesModel = new DefaultComboBoxModel();
        listSourcesModel = new DefaultComboBoxModel();
        listPossibleSourcesModel = new DefaultComboBoxModel();
        listDirectionsModel = new DefaultComboBoxModel();
        listRoutes.setModel(listRoutesModel);
        listSources.setModel(listSourcesModel);
        listSubRoutes.setModel(listSubRoutesModel);
        comboSource.setModel(listPossibleSourcesModel);
        listDirections.setModel(listDirectionsModel);
        Dialog_circuit.pack();
        createLineState = 0;
        simTimer = new SimTimer(Sim, fenetre_sim1, this);
        pressedX = 0;
        pressedY = 0;
        dragMove = false;
        dragSelect = false;
        timeJSpinnerStop.incrementHours();
        
        // Bouton delete
        InputMap in = fenetre_sim1.getInputMap(fenetre_sim1.WHEN_IN_FOCUSED_WINDOW);
        ActionMap am = fenetre_sim1.getActionMap();
        in.put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE,0), "Delete");
        am.put("Delete", new AbstractAction() {
           @Override
           public void actionPerformed(ActionEvent e) {
               delete();
           }
        });
        //
        
        defaultCursor = new Cursor(0); // pointing hand
        handCursor = new Cursor(12); // pointing hand
        quadraArrowsCursor = new Cursor(13); // crosshair arrows
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Dialog_circuit = new javax.swing.JDialog();
        ok_dialog_circuit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spin_num = new javax.swing.JSpinner();
        spinFreqType = new javax.swing.JSpinner();
        spin_t = new javax.swing.JSpinner();
        maxBus = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listSources = new javax.swing.JList();
        buttonSource = new javax.swing.JButton();
        comboSource = new javax.swing.JComboBox();
        buttonApplySource = new javax.swing.JButton();
        buttonDeleteSource = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        checkLoop = new javax.swing.JCheckBox();
        spinFreqMax = new javax.swing.JSpinner();
        spinFreqMin = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem12 = new javax.swing.JMenuItem();
        editionButtonGroup = new javax.swing.ButtonGroup();
        Dialog_besoin_transport = new javax.swing.JDialog();
        okDirections = new javax.swing.JButton();
        routesComboBox = new javax.swing.JComboBox();
        startComboBox = new javax.swing.JComboBox();
        endComboBox = new javax.swing.JComboBox();
        addSubRouteButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listSubRoutes = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        spinFirstStart = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        spinFreqPassenger = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jInternalFrame5 = new javax.swing.JInternalFrame();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        jScrollPane1 = new javax.swing.JScrollPane();
        Print = new javax.swing.JTextPane();
        fenetre_sim1 = new simulatheure.SimDisplay();
        displayLabelCoordonnees = new javax.swing.JLabel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        listRoutes = new javax.swing.JList();
        Bouton_circuit = new javax.swing.JButton();
        buttonEditRoute = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        Bouton_arreter = new javax.swing.JButton();
        Bouton_simuler = new javax.swing.JButton();
        simulation_speed = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        sim_time = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        buttonStats = new javax.swing.JButton();
        timeJSpinnerStart = new simulatheure.TimeJSpinner();
        timeJSpinnerStop = new simulatheure.TimeJSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        editionToolbox = new javax.swing.JInternalFrame();
        addNodeToggleButton = new javax.swing.JToggleButton();
        addAreteToggleButton = new javax.swing.JToggleButton();
        selectorToggleButton = new javax.swing.JToggleButton();
        moveToggleButton = new javax.swing.JToggleButton();
        jInternalFrame3 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        checkBoxStation = new javax.swing.JCheckBox();
        textStationName = new javax.swing.JFormattedTextField();
        buttonSave = new javax.swing.JButton();
        buttonLoad = new javax.swing.JButton();
        jInternalFrame4 = new javax.swing.JInternalFrame();
        jScrollPane5 = new javax.swing.JScrollPane();
        listDirections = new javax.swing.JList();
        buttonBesoins = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jInternalFrame6 = new javax.swing.JInternalFrame();
        spinMinSpeed = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        spinMaxSpeed = new javax.swing.JSpinner();
        spinTypeSpeed = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        applyLine = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFolderFichier = new javax.swing.JMenu();
        menuCommandNouvDoc = new javax.swing.JMenuItem();
        menuCommandOuvrir = new javax.swing.JMenuItem();
        menuCommandEnregistrer = new javax.swing.JMenuItem();
        menuCommandEnregSous = new javax.swing.JMenuItem();
        menuFolderEdition = new javax.swing.JMenu();
        menuCommandSupprimer = new javax.swing.JMenuItem();
        menuCommandAjouterNoeud = new javax.swing.JMenuItem();
        menuCommandAjouterArete = new javax.swing.JMenuItem();
        menuCommandDeplacerNoeud = new javax.swing.JMenuItem();
        menuFolderSimulation = new javax.swing.JMenu();
        menuCommandLancerSim = new javax.swing.JMenuItem();
        menuCommandStopperSim = new javax.swing.JMenuItem();
        menuCommandAnalResults = new javax.swing.JMenuItem();
        menuFolderCircuit = new javax.swing.JMenu();
        menuCommandAjouterCircuit = new javax.swing.JMenuItem();
        menuCommandModCircuit = new javax.swing.JMenuItem();
        menuFolderAffichage = new javax.swing.JMenu();
        menuSubfolderToolboxes = new javax.swing.JMenu();
        menuOptionSeeEditionToolbox = new javax.swing.JCheckBoxMenuItem();
        menuOptionSeeCircuitToolbox = new javax.swing.JCheckBoxMenuItem();
        menuOptionSeeSimToolbox = new javax.swing.JCheckBoxMenuItem();
        menuSubfolderInformation = new javax.swing.JMenu();
        menuOptionSeeCoordsDisplay = new javax.swing.JCheckBoxMenuItem();
        menuOptionSeeTooltipsDisplay = new javax.swing.JCheckBoxMenuItem();

        Dialog_circuit.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        Dialog_circuit.setAlwaysOnTop(true);
        Dialog_circuit.setBounds(new java.awt.Rectangle(100, 1, 200, 350));
        Dialog_circuit.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        Dialog_circuit.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        Dialog_circuit.setResizable(false);
        Dialog_circuit.setSize(new java.awt.Dimension(156, 254));
        Dialog_circuit.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                Dialog_circuitWindowClosing(evt);
            }
        });

        ok_dialog_circuit.setText("Ok");
        ok_dialog_circuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_dialog_circuitActionPerformed(evt);
            }
        });

        jLabel3.setText("Numéro");

        jLabel4.setText("Fréquence");

        jLabel5.setText("Temps avant premier départ");

        spin_num.setModel(new javax.swing.SpinnerNumberModel(1, 1, 999, 1));

        spinFreqType.setModel(new javax.swing.SpinnerNumberModel(15, 1, 999, 1));

        spin_t.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));

        maxBus.setModel(new javax.swing.SpinnerNumberModel(25, 1, 999, 1));

        jLabel10.setText("Nombre max de bus");

        listSources.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listSourcesMouseClicked(evt);
            }
        });
        listSources.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSourcesValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(listSources);

        buttonSource.setText("Ajouter source");
        buttonSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSourceActionPerformed(evt);
            }
        });

        comboSource.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSourceActionPerformed(evt);
            }
        });

        buttonApplySource.setText("Appliquer modification");
        buttonApplySource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApplySourceActionPerformed(evt);
            }
        });

        buttonDeleteSource.setText("Supprimer Source");
        buttonDeleteSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteSourceActionPerformed(evt);
            }
        });

        checkLoop.setText("Boucle?");
        checkLoop.setEnabled(false);
        checkLoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkLoopActionPerformed(evt);
            }
        });

        spinFreqMax.setModel(new javax.swing.SpinnerNumberModel(15, 1, 999, 1));

        spinFreqMin.setModel(new javax.swing.SpinnerNumberModel(15, 1, 999, 1));

        jLabel7.setText("Min");

        jLabel19.setText("Max");

        jLabel20.setText("Typique");

        javax.swing.GroupLayout Dialog_circuitLayout = new javax.swing.GroupLayout(Dialog_circuit.getContentPane());
        Dialog_circuit.getContentPane().setLayout(Dialog_circuitLayout);
        Dialog_circuitLayout.setHorizontalGroup(
            Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(spin_num, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addComponent(maxBus, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(checkLoop))
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ok_dialog_circuit)
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Dialog_circuitLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(spin_t, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel7)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Dialog_circuitLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(comboSource, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(buttonApplySource)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Dialog_circuitLayout.createSequentialGroup()
                                            .addComponent(spinFreqMin)
                                            .addGap(18, 18, 18)
                                            .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                                    .addComponent(jLabel19)
                                                    .addGap(40, 40, 40)
                                                    .addComponent(jLabel20))
                                                .addGroup(Dialog_circuitLayout.createSequentialGroup()
                                                    .addComponent(spinFreqMax, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(spinFreqType, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonSource, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonDeleteSource, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addComponent(jSeparator3)
        );
        Dialog_circuitLayout.setVerticalGroup(
            Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spin_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxBus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkLoop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addComponent(comboSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spin_t, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinFreqType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinFreqMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinFreqMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSource)
                    .addComponent(buttonApplySource))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonDeleteSource)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ok_dialog_circuit)
                .addContainerGap())
        );

        jMenuItem12.setText("jMenuItem12");

        Dialog_besoin_transport.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        Dialog_besoin_transport.setAlwaysOnTop(true);
        Dialog_besoin_transport.setMinimumSize(new java.awt.Dimension(440, 350));
        Dialog_besoin_transport.setModal(true);
        Dialog_besoin_transport.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        Dialog_besoin_transport.setResizable(false);
        Dialog_besoin_transport.setSize(new java.awt.Dimension(440, 350));
        Dialog_besoin_transport.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                Dialog_besoin_transportWindowClosing(evt);
            }
        });

        okDirections.setText("Ok");
        okDirections.setEnabled(false);
        okDirections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okDirectionsActionPerformed(evt);
            }
        });

        routesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        routesComboBox.setSelectedItem(null);
        routesComboBox.setEnabled(false);
        routesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                routesComboBoxActionPerformed(evt);
            }
        });

        startComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        startComboBox.setSelectedItem(null);
        startComboBox.setEnabled(false);
        startComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startComboBoxActionPerformed(evt);
            }
        });

        endComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        endComboBox.setSelectedItem(null);
        endComboBox.setEnabled(false);
        endComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endComboBoxActionPerformed(evt);
            }
        });

        addSubRouteButton.setText("Add");
        addSubRouteButton.setEnabled(false);
        addSubRouteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSubRouteButtonActionPerformed(evt);
            }
        });

        listSubRoutes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listSubRoutes);

        jLabel2.setText("Station de transit");

        jLabel11.setText("Station de départ");

        jLabel12.setText("Circuit");

        spinFirstStart.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));

        jLabel13.setText("Premier départ");

        spinFreqPassenger.setModel(new javax.swing.SpinnerNumberModel(1, 1, 999, 1));

        jLabel14.setText("Fréquence");

        javax.swing.GroupLayout Dialog_besoin_transportLayout = new javax.swing.GroupLayout(Dialog_besoin_transport.getContentPane());
        Dialog_besoin_transport.getContentPane().setLayout(Dialog_besoin_transportLayout);
        Dialog_besoin_transportLayout.setHorizontalGroup(
            Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(addSubRouteButton)
                                .addGap(47, 47, 47)
                                .addComponent(okDirections))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, Dialog_besoin_transportLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(30, 30, 30)
                                        .addComponent(spinFirstStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(56, 56, 56)
                                        .addComponent(spinFreqPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(11, 11, 11))
                    .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(startComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(routesComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(endComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        Dialog_besoin_transportLayout.setVerticalGroup(
            Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Dialog_besoin_transportLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(routesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinFirstStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinFreqPassenger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Dialog_besoin_transportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(okDirections)
                            .addComponent(addSubRouteButton))))
                .addGap(10, 10, 10))
        );

        jInternalFrame5.setVisible(true);

        javax.swing.GroupLayout jInternalFrame5Layout = new javax.swing.GroupLayout(jInternalFrame5.getContentPane());
        jInternalFrame5.getContentPane().setLayout(jInternalFrame5Layout);
        jInternalFrame5Layout.setHorizontalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame5Layout.setVerticalGroup(
            jInternalFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SimulatHeure");
        setBackground(new java.awt.Color(0, 0, 0));

        Print.setEditable(false);
        Print.setBorder(null);
        Print.setToolTipText("");
        Print.setFocusable(false);
        jScrollPane1.setViewportView(Print);

        fenetre_sim1.setBackground(new java.awt.Color(204, 204, 204));
        fenetre_sim1.setAutoscrolls(true);
        fenetre_sim1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                fenetre_sim1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                fenetre_sim1MouseMoved(evt);
            }
        });
        fenetre_sim1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                fenetre_sim1MouseWheelMoved(evt);
            }
        });
        fenetre_sim1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fenetre_sim1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                fenetre_sim1MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout fenetre_sim1Layout = new javax.swing.GroupLayout(fenetre_sim1);
        fenetre_sim1.setLayout(fenetre_sim1Layout);
        fenetre_sim1Layout.setHorizontalGroup(
            fenetre_sim1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        fenetre_sim1Layout.setVerticalGroup(
            fenetre_sim1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        displayLabelCoordonnees.setText("Coordonnées");

        jInternalFrame1.setTitle("Circuit");
        jInternalFrame1.setAutoscrolls(true);
        jInternalFrame1.setFocusable(false);
        jInternalFrame1.setMinimumSize(new java.awt.Dimension(249, 160));
        jInternalFrame1.setVisible(true);
        jInternalFrame1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jInternalFrame1MouseEntered(evt);
            }
        });

        listRoutes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listRoutes.setMaximumSize(new java.awt.Dimension(100, 100));
        listRoutes.setMinimumSize(new java.awt.Dimension(100, 100));
        listRoutes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listRoutesMouseClicked(evt);
            }
        });
        listRoutes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listRoutesValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(listRoutes);

        Bouton_circuit.setText("Ajouter");
        Bouton_circuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_circuitActionPerformed(evt);
            }
        });

        buttonEditRoute.setText("Editer");
        buttonEditRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditRouteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(Bouton_circuit, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonEditRoute, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addGap(6, 6, 6)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bouton_circuit)
                    .addComponent(buttonEditRoute))
                .addGap(6, 6, 6))
        );

        jInternalFrame2.setTitle("Simulation");
        jInternalFrame2.setFocusable(false);
        jInternalFrame2.setVisible(true);

        Bouton_arreter.setText("Arrêter");
        Bouton_arreter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_arreterActionPerformed(evt);
            }
        });

        Bouton_simuler.setText("Simuler");
        Bouton_simuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_simulerActionPerformed(evt);
            }
        });

        simulation_speed.setMinimum(1);
        simulation_speed.setValue(4);
        simulation_speed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                simulation_speedStateChanged(evt);
            }
        });

        jLabel8.setText("Vitesse");

        sim_time.setText("0");
        sim_time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sim_timeActionPerformed(evt);
            }
        });

        jLabel9.setText("Temps (m) ");

        buttonStats.setText("Générer Stats");
        buttonStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStatsActionPerformed(evt);
            }
        });

        jLabel6.setText("Départ");

        jLabel18.setText("Fin");

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sim_time))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(31, 31, 31)
                        .addComponent(timeJSpinnerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonStats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Bouton_simuler, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Bouton_arreter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simulation_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame2Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timeJSpinnerStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(Bouton_simuler)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Bouton_arreter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonStats)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(simulation_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(timeJSpinnerStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeJSpinnerStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sim_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        jButton1.setText("Recentrer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        editionToolbox.setTitle("Edition");
        editionToolbox.setVisible(true);

        editionButtonGroup.add(addNodeToggleButton);
        addNodeToggleButton.setText("Noeud");
        addNodeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNodeToggleButtonActionPerformed(evt);
            }
        });

        editionButtonGroup.add(addAreteToggleButton);
        addAreteToggleButton.setText("Arête");
        addAreteToggleButton.setMaximumSize(new java.awt.Dimension(63, 23));
        addAreteToggleButton.setMinimumSize(new java.awt.Dimension(63, 23));
        addAreteToggleButton.setPreferredSize(new java.awt.Dimension(63, 23));
        addAreteToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAreteToggleButtonActionPerformed(evt);
            }
        });

        editionButtonGroup.add(selectorToggleButton);
        selectorToggleButton.setText("Selection");
        selectorToggleButton.setMaximumSize(new java.awt.Dimension(63, 23));
        selectorToggleButton.setMinimumSize(new java.awt.Dimension(63, 23));
        selectorToggleButton.setPreferredSize(new java.awt.Dimension(63, 23));
        selectorToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorToggleButtonActionPerformed(evt);
            }
        });

        editionButtonGroup.add(moveToggleButton);
        moveToggleButton.setText("Déplacer");
        moveToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editionToolboxLayout = new javax.swing.GroupLayout(editionToolbox.getContentPane());
        editionToolbox.getContentPane().setLayout(editionToolboxLayout);
        editionToolboxLayout.setHorizontalGroup(
            editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editionToolboxLayout.createSequentialGroup()
                .addGroup(editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectorToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(addAreteToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addNodeToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(moveToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1))
        );
        editionToolboxLayout.setVerticalGroup(
            editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editionToolboxLayout.createSequentialGroup()
                .addGroup(editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectorToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addNodeToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editionToolboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addAreteToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(moveToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );

        jInternalFrame3.setTitle("Noeud");
        jInternalFrame3.setVisible(true);

        jLabel1.setText("Nom");

        checkBoxStation.setText("Station");
        checkBoxStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxStationActionPerformed(evt);
            }
        });

        textStationName.setText("-");
        textStationName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textStationNameKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame3Layout = new javax.swing.GroupLayout(jInternalFrame3.getContentPane());
        jInternalFrame3.getContentPane().setLayout(jInternalFrame3Layout);
        jInternalFrame3Layout.setHorizontalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxStation)
                    .addComponent(textStationName, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(10, 10, 10))
        );
        jInternalFrame3Layout.setVerticalGroup(
            jInternalFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame3Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textStationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkBoxStation)
                .addContainerGap())
        );

        buttonSave.setText("TEST SAVE");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        buttonLoad.setText("TEST LOAD");
        buttonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadActionPerformed(evt);
            }
        });

        jInternalFrame4.setTitle("Besoins en transport");
        jInternalFrame4.setMaximumSize(new java.awt.Dimension(189, 140));
        jInternalFrame4.setMinimumSize(new java.awt.Dimension(189, 140));
        jInternalFrame4.setVisible(true);

        listDirections.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listDirections.setMaximumSize(new java.awt.Dimension(100, 100));
        listDirections.setMinimumSize(new java.awt.Dimension(100, 100));
        listDirections.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listDirectionsMouseClicked(evt);
            }
        });
        listDirections.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listDirectionsValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(listDirections);

        buttonBesoins.setText("Ajouter");
        buttonBesoins.setEnabled(false);
        buttonBesoins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBesoinsActionPerformed(evt);
            }
        });

        jButton2.setText("Editer");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame4Layout = new javax.swing.GroupLayout(jInternalFrame4.getContentPane());
        jInternalFrame4.getContentPane().setLayout(jInternalFrame4Layout);
        jInternalFrame4Layout.setHorizontalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addComponent(buttonBesoins, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jInternalFrame4Layout.setVerticalGroup(
            jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame4Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBesoins)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jInternalFrame6.setTitle("Arête");
        jInternalFrame6.setVisible(true);

        spinMinSpeed.setModel(new javax.swing.SpinnerNumberModel(20, 5, 100, 1));
        spinMinSpeed.setMaximumSize(new java.awt.Dimension(47, 20));

        jLabel15.setText("Min");

        jLabel16.setText("Max");

        spinMaxSpeed.setModel(new javax.swing.SpinnerNumberModel(20, 5, 100, 1));

        spinTypeSpeed.setModel(new javax.swing.SpinnerNumberModel(20, 5, 100, 1));

        jLabel17.setText("Typical");

        applyLine.setText("Appliquer");
        applyLine.setEnabled(false);
        applyLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyLineActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame6Layout = new javax.swing.GroupLayout(jInternalFrame6.getContentPane());
        jInternalFrame6.getContentPane().setLayout(jInternalFrame6Layout);
        jInternalFrame6Layout.setHorizontalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame6Layout.createSequentialGroup()
                        .addComponent(applyLine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jInternalFrame6Layout.createSequentialGroup()
                        .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinMaxSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinMinSpeed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinTypeSpeed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))))
        );
        jInternalFrame6Layout.setVerticalGroup(
            jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame6Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinMinSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinMaxSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spinTypeSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(10, 10, 10)
                .addComponent(applyLine)
                .addContainerGap())
        );

        menuFolderFichier.setMnemonic('f');
        menuFolderFichier.setText("Fichier");

        menuCommandNouvDoc.setText("Nouveau document");
        menuFolderFichier.add(menuCommandNouvDoc);

        menuCommandOuvrir.setText("Ouvrir");
        menuFolderFichier.add(menuCommandOuvrir);

        menuCommandEnregistrer.setText("Enregistrer");
        menuFolderFichier.add(menuCommandEnregistrer);

        menuCommandEnregSous.setText("Enregistrer sous");
        menuFolderFichier.add(menuCommandEnregSous);

        jMenuBar1.add(menuFolderFichier);

        menuFolderEdition.setMnemonic('e');
        menuFolderEdition.setText("Edition");

        menuCommandSupprimer.setMnemonic('u');
        menuCommandSupprimer.setText("Supprimer");
        menuCommandSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandSupprimerActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandSupprimer);

        menuCommandAjouterNoeud.setMnemonic('o');
        menuCommandAjouterNoeud.setText("Ajouter Noeud");
        menuCommandAjouterNoeud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAjouterNoeudActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandAjouterNoeud);

        menuCommandAjouterArete.setMnemonic('r');
        menuCommandAjouterArete.setText("Ajouter Arête");
        menuCommandAjouterArete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAjouterAreteActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandAjouterArete);

        menuCommandDeplacerNoeud.setMnemonic('d');
        menuCommandDeplacerNoeud.setText("Déplacer Noeud/Station");
        menuCommandDeplacerNoeud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandDeplacerNoeudActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandDeplacerNoeud);

        jMenuBar1.add(menuFolderEdition);

        menuFolderSimulation.setMnemonic('s');
        menuFolderSimulation.setText("Simulation");

        menuCommandLancerSim.setText("Lancer simulation");
        menuFolderSimulation.add(menuCommandLancerSim);

        menuCommandStopperSim.setText("Stopper simulation");
        menuFolderSimulation.add(menuCommandStopperSim);

        menuCommandAnalResults.setText("Analyser resultats");
        menuFolderSimulation.add(menuCommandAnalResults);

        jMenuBar1.add(menuFolderSimulation);

        menuFolderCircuit.setMnemonic('c');
        menuFolderCircuit.setText("Circuit");

        menuCommandAjouterCircuit.setText("Ajouter");
        menuFolderCircuit.add(menuCommandAjouterCircuit);

        menuCommandModCircuit.setText("Modifier");
        menuFolderCircuit.add(menuCommandModCircuit);

        jMenuBar1.add(menuFolderCircuit);

        menuFolderAffichage.setMnemonic('a');
        menuFolderAffichage.setText("Affichage");

        menuSubfolderToolboxes.setText("Barres d'outils");

        menuOptionSeeEditionToolbox.setSelected(true);
        menuOptionSeeEditionToolbox.setText("jCheckBoxMenuItem1");
        menuSubfolderToolboxes.add(menuOptionSeeEditionToolbox);

        menuOptionSeeCircuitToolbox.setSelected(true);
        menuOptionSeeCircuitToolbox.setText("Circuit");
        menuSubfolderToolboxes.add(menuOptionSeeCircuitToolbox);

        menuOptionSeeSimToolbox.setSelected(true);
        menuOptionSeeSimToolbox.setText("Simulation");
        menuSubfolderToolboxes.add(menuOptionSeeSimToolbox);

        menuFolderAffichage.add(menuSubfolderToolboxes);

        menuSubfolderInformation.setText("Informations");

        menuOptionSeeCoordsDisplay.setSelected(true);
        menuOptionSeeCoordsDisplay.setText("Coordonées");
        menuOptionSeeCoordsDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOptionSeeCoordsDisplayActionPerformed(evt);
            }
        });
        menuSubfolderInformation.add(menuOptionSeeCoordsDisplay);

        menuOptionSeeTooltipsDisplay.setSelected(true);
        menuOptionSeeTooltipsDisplay.setText("Infobulle");
        menuSubfolderInformation.add(menuOptionSeeTooltipsDisplay);

        menuFolderAffichage.add(menuSubfolderInformation);

        jMenuBar1.add(menuFolderAffichage);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fenetre_sim1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editionToolbox, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jInternalFrame1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 197, Short.MAX_VALUE)
                            .addComponent(jInternalFrame4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jInternalFrame3)
                            .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jInternalFrame6))
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(9, 9, 9)
                        .addComponent(displayLabelCoordonnees, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fenetre_sim1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jInternalFrame2)
                            .addComponent(jInternalFrame1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jInternalFrame6)
                            .addComponent(jInternalFrame4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(editionToolbox)
                            .addComponent(jInternalFrame3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(displayLabelCoordonnees, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(buttonSave)
                        .addComponent(buttonLoad)))
                .addGap(1, 1, 1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void selectOnly(Boolean state){
            selectorToggleButton.setSelected(state);
            addAreteToggleButton.setEnabled(!state);
            addNodeToggleButton.setEnabled(!state);
            checkBoxStation.setEnabled(!state);
            buttonEditRoute.setEnabled(!state);
            mouseClickState = "selection";
            mouseClickStatePersistance = !state;
            Bouton_simuler.setEnabled(!state);
            buttonStats.setEnabled(!state);
            spinMinSpeed.setEnabled(!state);
            spinTypeSpeed.setEnabled(!state);
            spinMaxSpeed.setEnabled(!state);
            buttonBesoins.setEnabled(!state);
            selectorToggleButton.setEnabled(!state);
            
    }
    
    public void selectRectangle(){
        fenetre_sim1.selectRectangle();
        
        //Nodes
        //selectedNode.clear();
        
        for (Node n: Sim.listNodes){
            if(fenetre_sim1.selectionRectangle.contains(n.getPositionX(), n.getPositionY())){
                System.out.println("Saw one");
                if (!selectedNode.contains(n)){
                    selectedNode.add(n);
                }
            }
        }
        selectedObject = "multiples";
        
    }
    
    public void clearSelection(){
        selectedBus = null;
        selectedLine = null;
        selectedNode.clear();
        selectedObject = "none";
        selectedRoute = null;
        selectedDirections = null;
        fenetre_sim1.clearSelection();   
        createRouteState = "idle";
        fenetre_sim1.selectionRectangle.setRect(0, 0, 0, 0);
        createRoute();
        

    }
    
    public void createRoute(){
        switch (createRouteState){

        case "idle":
            break;
        case "reset": // reset
           createRouteState = "idle";
           Print.setText("Création de circuit annulée");
           selectedRoute = null;
            selectOnly(false);
           break;
            
        case  "dialog":
            fenetre_sim1.clearSelection();
            //dialog
            selectedRoute = Sim.newRoute;
            createRouteState = "Creation";
            
            Dialog_circuit.setVisible(true);
            //
            
            // cas ou on pese sur le X du dialog
            if (createRouteState == "reset"){
                createRoute();
            }
            break;
            
        case  "select":
           selectOnly(true);

            Print.setText("Veuillez sélectionner la station 1 du circuit.");
            Sim.newRoute.route.clear();

            break;    
            
        case "Creation":
           if (Sim.newRoute.route.size()>1 && Sim.newRoute.route.get(Sim.newRoute.route.size()-1).isStation ==true && Sim.routeNumberAvailable((int)spin_num.getValue())){
             selectedRoute = Sim.addNewRoute((int)spin_num.getValue(),(int)maxBus.getValue() );
             selectedRoute.updateIfLoop();

             selectedObject = "Circuit";
             Sim.newRoute = null;
             fenetre_sim1.clearSelection();
             
             fenetre_sim1.selectRoute(selectedRoute);

             listRoutesModel.addElement(selectedRoute.getNumber());
             listRoutes.setSelectedIndex(listRoutes.getLastVisibleIndex());
             Print.setText("Circuit "+ selectedRoute.getNumber()+ " créé avec succès!");
             buttonBesoins.setEnabled(true);
             fenetre_sim1.repaint();
           }
           else{
               Print.setText("Circuit invalide!");
           }
            selectOnly(false);
            createRouteState = "idle";

           break;
        case "Edit":
            if (!Sim.routeNumberAvailable((int) spin_num.getValue()) && selectedRoute.getNumber() !=(int) spin_num.getValue()){
                Print.setText("Ce numéro de circuit est déjà utilisé");
                createRouteState = "select";
                break;
            }
            int i = listRoutesModel.getIndexOf(selectedRoute.getNumber());
            selectedRoute.setNumber((int)spin_num.getValue());
            selectedRoute.setMaxBus((int) maxBus.getValue());
            listRoutesModel.removeElementAt( i);

            listRoutesModel.insertElementAt(selectedRoute.getNumber(), i);
            createRouteState = "idle";
        default:
            break;
        }
    }
    
    public void createNode(int x, int y){
        Line aSelect;
           
        aSelect = null;
        if(selectedNode.isEmpty()){
            aSelect = Sim.getLineFromPosition(x,y); 
        }
        if(aSelect != null){
            selectedNode.add(Sim.splitLine(aSelect, x, y));
            selectedObject = "Noeud";
            Print.setText("Noeud selectionne!");
            fenetre_sim1.selectNode(selectedNode);
        }
        //Nouveau point
        else if (selectedNode.isEmpty()){
            selectedNode.add(Sim.addNode(x, y));
            selectedObject = "Noeud";
            Print.setText("Noeud selectionne!");
            fenetre_sim1.selectNode(selectedNode);
        }

    }
    
    public void createLine(int x, int y){
       

        switch (createLineState){
            case 0:
                selectedLine = null;
                if(selectedNode.isEmpty()){
                    selectedLine = Sim.getLineFromPosition(x,y); 
                }
                //point sur une ligne
                if(selectedLine != null){
                    nodeBuffer = Sim.splitLine(selectedLine, x, y);
                }
                //Nouveau point
                else if (selectedNode.isEmpty()){
                    nodeBuffer = Sim.addNode(x, y);

                }
                //point existant
                else{
                    nodeBuffer = selectedNode.get(0);
                    selectedNode.clear();
                }
                    
                createLineState = 1;
                break;
                
            case 1:
                Node noeud1 = nodeBuffer;
                Node noeud2;
                selectedLine = null;
                if (!selectedNode.isEmpty()){
                    noeud2 = selectedNode.get(0);
                }
                else{
                    selectedLine = Sim.getLineFromPosition(x,y); 
                    if (selectedLine != null){
                        noeud2 = Sim.splitLine(selectedLine, x, y);
                    }
                    else{
                        noeud2 = new Node(x,y);
                    }
                }
                selectedLine = Sim.addLine(noeud1, noeud2);
                if (selectedLine == null){
                    Print.setText("Veuillez sélectionner un noeud différent du premier.");
                    break;
                }
                selectedObject = "Noeud";
                selectedNode.add(noeud2);
                nodeBuffer = noeud2;
                selectedLine = null;
                createLineState = 1;
                //fenetre_sim1.createLineTemp = null;
                fenetre_sim1.selectNode(selectedNode);
                /*if (mouseClickStatePersistance == false){
                    mouseClickState = "selection";
                }
                */
                break;
            default:
                break;
        }
    }
    
    public void delete(){
            
           if (selectedObject == "Noeud" || selectedObject == "Station" || selectedObject == "multiples" ) {
                Sim.deleteNode(selectedNode);
           }
           else if (selectedObject == "Line"){
               if(Sim.deleteLine(selectedLine)){
                   Print.setText("Arête supprimée avec succès.");
               }
               else{
                    Print.setText("L'Arête appartient à un circuit!");
               }
               
           }
           else if (selectedObject == "Circuit"){
            
            int i = listRoutes.getSelectedIndex();
            if (i >= 0){


                int numero_circuit = selectedRoute.getNumber();
                if (Sim.deleteRoute(selectedRoute)){
                
                    listRoutesModel.removeElementAt(i);
                    selectedRoute = null;
                    Print.setText("Circuit "+numero_circuit+ " supprimé avec succès.");
                }
                else{
                    Print.setText("Ce circuit appartient à un besoin en transport!");
                }

            }
 
            }
            else if (selectedObject == "Directions"){
                int indexDirections = listDirections.getSelectedIndex();
                listDirectionsModel.removeElementAt(indexDirections);
                Sim.deleteDirections(selectedDirections);
                selectedDirections = null;
            }
            else{
            
                    Print.setText("Il n'y a rien de selectionné à supprimer.");
                

            }
        
        selectedObject = null;
        fenetre_sim1.clearSelection();
        fenetre_sim1.repaint();
    }
    
    public void displayTime(){
        sim_time.setText(""+Sim.freq*Sim.count/1000);
    }
    
    private boolean cursorIsOnObject(int x, int y){
        if (Sim.getNodeFromPosition(x,y, 20, fenetre_sim1.img_station_size) != null){
            return true;
        }
        return false;
    }
    
    private void selectedNodeRoutine(){
        selectedObject = "Noeud";
        Print.setText("Noeud selectionne!");
        textStationName.setText("-");
        checkBoxStation.setEnabled(true);
        checkBoxStation.setSelected(selectedNode.get(0).isStation);
        fenetre_sim1.selectNode(selectedNode);
        if (selectedNode.get(0).isStation){
            selectedObject = "Station";
            Print.setText("Station selectionnée: "+selectedNode.get(0).getName());
            textStationName.setText(selectedNode.get(0).getName());

        }
    }
    
    private void selectedLineRoutine(){ 
        selectedObject = "Line";
        Print.setText("Arête sélectionnée");
        fenetre_sim1.selectLine(selectedLine);
        applyLine.setEnabled(true);
        spinMinSpeed.setValue(selectedLine.minSpeed*60/1000);
        spinMaxSpeed.setValue(selectedLine.maxSpeed*60/1000);
        spinTypeSpeed.setValue(selectedLine.typeSpeed*60/1000);
    }
    
    private void addNodeNewRoute(){
        if (!selectedNode.isEmpty()){
            Boolean isPossible = Sim.addNodeToNewRoute(selectedNode.get(0));

            if (isPossible ){
                Print.setText("Noeud ajoutée (" +selectedNode.get(0).getName()+  ") au parcours!");
                fenetre_sim1.selectNode(selectedNode);
                if (Sim.newRoute.route.size()>1){
                    for (int i = 1; i<Sim.newRoute.route.size(); i++){
                        Line l = Sim.getLine(Sim.newRoute.route.get(i-1), Sim.newRoute.route.get(i));
                        fenetre_sim1.selectLine(l);
                        fenetre_sim1.selectNode(Sim.newRoute.route);
                    }
                }
            }
            else{
                Print.setText("Veuillez sélectionner un noeud valide!");
            }
        }
    }
    
    private void moveNodeRoutine(){
        
        if (!selectedNode.isEmpty())
            System.out.println(selectedNode.size());
            {
                for (Node n: selectedNode){
                    System.out.println( - (int)fenetre_sim1.selectionRectangle.getCenterX() + pressedX);
                    n.setPositionX(n.getPositionX() - (int)fenetre_sim1.selectionRectangle.getCenterX() + pressedX);
                    n.setPositionY(n.getPositionY() - (int)fenetre_sim1.selectionRectangle.getCenterY() + pressedY);
                    Sim.updateLines(n);
                }
            }
            fenetre_sim1.selectionRectangle.x = fenetre_sim1.selectionRectangle.x -(int)fenetre_sim1.selectionRectangle.getCenterX() + pressedX;
            fenetre_sim1.selectionRectangle.y = fenetre_sim1.selectionRectangle.y- (int)fenetre_sim1.selectionRectangle.getCenterY() + pressedY;
            if (mouseClickStatePersistance == false){
                mouseClickState = "selection";
            }
            
    }
    
    private void noneSelectedRoutine(){
        Print.setText("Vous n'avez rien sélectionné");
        textStationName.setText("-");  
        checkBoxStation.setSelected(false);
        applyLine.setEnabled(false);
    }
    
    private void selectedBusRoutine(){
        selectedObject = "Bus";
        Print.setText("Bus sélectionné, contient "+selectedBus.listPassenger.size()+ " passagers!");
        fenetre_sim1.selectBus(selectedBus);
    }
    
    private void fenetre_sim1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fenetre_sim1MousePressed
         //coordonnées du clic
        
        checkLoop.setEnabled(false);
        checkLoop.setSelected(false);
       
        pressedX = fenetre_sim1.getGridPositionX(evt.getX());
        pressedY = fenetre_sim1.getGridPositionY(evt.getY());
        
        if (SwingUtilities.isRightMouseButton(evt)){
            dragMove = true;
            if (createRouteState == "idle"){
                clearSelection();
            }
            if (createLineState == 1){
                createLineState = 0;
                
            }
            
        }

        else if (SwingUtilities.isLeftMouseButton(evt)){
        /* -------------- Selection d'un Noeud ------------- */
            if (createRouteState == "idle" && mouseClickState == "selection"){
                
                 dragSelect = true;
            }
        int size = 20;//   
        int size_s = fenetre_sim1.img_station_size; //taille d'une station
        int size_b = fenetre_sim1.img_bus_selected_size;
        
        if (mouseClickState.matches("selection|ajoutArete|ajoutNoeud")){
            selectedNode.clear();
            fenetre_sim1.clearSelection();
            fenetre_sim1.selectionRectangle.setRect(pressedX, pressedY, 0, 0);
            if (simTimer.running){
                selectedBus = Sim.getBusFromPosition(pressedX, pressedY, size_b);
                if (selectedBus != null){
                    selectedBusRoutine();
                }
                else{
                    Node n = Sim.getNodeFromPosition(pressedX,pressedY, size, size_s);
                    if (n != null){
                        selectedNode.add(n);
                    }
                    if (!selectedNode.isEmpty()){
                       selectedNodeRoutine();
                    }
                    else{
                       noneSelectedRoutine();
                    }
                }
            }
            
            else{
                //va chercher la station correspondant au clic
                Node n = Sim.getNodeFromPosition(pressedX,pressedY, size, size_s);
                if (n != null){
                    selectedNode.add(n);
                }

                if (!selectedNode.isEmpty()){
                    selectedNodeRoutine();
                }
                // les nodes ont priorité de sélection sur les arêtes
                /* -------------- Sélection d'une arête ------------- */
                else{
                    selectedLine  = Sim.getLineFromPosition(pressedX, pressedY);
                    if (selectedLine != null){
                         selectedLineRoutine();
                    }
                    else{
                        noneSelectedRoutine();   
                    }
                }
            }
        }
          
        /* -------------- Ajout de station à un circuit ------------- */
        if (createRouteState == "select"){
            addNodeNewRoute();
        }

        /* -------------- Deplacer station ------------- */
        
        if (mouseClickState == "deplacerNoeud"){
           moveNodeRoutine();
        }
        
        /* -------------- Creation arete ------------- */
        
        if (mouseClickState == "ajoutArete"){
            createLine(pressedX, pressedY);
        }
        /* -------------- Creation noeud ------------- */
        
        if (mouseClickState == "ajoutNoeud"){
            System.out.println("LOL");
            createNode(pressedX, pressedY);
            if (mouseClickStatePersistance == false){

                    mouseClickState = "selection";

                }
            }
        }
        fenetre_sim1.repaint();
        
        
    }//GEN-LAST:event_fenetre_sim1MousePressed
    
    private void fenetre_sim1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fenetre_sim1MouseMoved
       
        int x =  fenetre_sim1.getGridPositionX(evt.getX());
        int y =  fenetre_sim1.getGridPositionY(evt.getY());

        
        displayLabelCoordonnees.setText("X:  "+x +" m"+"  Y:  "+ y +" m");
        
        if (createLineState == 1){
            fenetre_sim1.createLineTemp.setLine(pressedX, pressedY, x, y);
            fenetre_sim1.repaint();
        }

            
        if (cursorIsOnObject(x, y)){
            setCursor(handCursor);
        } else{
            setCursor(defaultCursor);
        }
     
        
    }//GEN-LAST:event_fenetre_sim1MouseMoved
    
    private void ok_dialog_circuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_dialog_circuitActionPerformed
        // TODO add your handling code here:
        if (!Sim.routeNumberAvailable((int)spin_num.getValue()) && selectedRoute.getNumber() !=(int)spin_num.getValue()){
            Print.setText("Numéro de circuit déjà utilisé!");
        }
        
        else{

            if (createRouteState == "Edit" ||createRouteState == "Creation"){
                createRoute();
            }
 
            Dialog_circuit.dispose();
        }
        
    }//GEN-LAST:event_ok_dialog_circuitActionPerformed

    private void Dialog_circuitWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Dialog_circuitWindowClosing
        // TODO add your handling code here:
        
        createRouteState ="reset";
        
    }//GEN-LAST:event_Dialog_circuitWindowClosing
    
 
private final int TICK_TIME = 33; // ms
    private void Bouton_simulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_simulerActionPerformed
        if (!simTimer.running){
            timeJSpinnerStart.setTime();
            timeJSpinnerStop.setTime();
            int deltaHours = timeJSpinnerStop.getHours() - timeJSpinnerStart.getHours();
            if (deltaHours < 0){
                deltaHours+= 24;
            }
            int deltaMinutes = timeJSpinnerStop.getMinutes()- timeJSpinnerStart.getMinutes();
            
            deltaMinutes += deltaHours*60;
            
            if (deltaMinutes > 0){
                simTimer.setSimSpeed(simulation_speed.getValue()/4);
                simTimer.start(deltaMinutes, TICK_TIME, false);
            }
            else{
                Print.setText("Les temps de départ et de fin sont identiques!");
            }
        }

    }//GEN-LAST:event_Bouton_simulerActionPerformed

    private void Bouton_arreterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_arreterActionPerformed
        // TODO add your handling code here:
            if (simTimer.running){
                simTimer.stop();
                fenetre_sim1.repaint();
            }
         
    }//GEN-LAST:event_Bouton_arreterActionPerformed

    private void simulation_speedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_simulation_speedStateChanged
        // TODO add your handling code here:
        simTimer.setSimSpeed(simulation_speed.getValue()/4);
    }//GEN-LAST:event_simulation_speedStateChanged

    private void jInternalFrame1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jInternalFrame1MouseEntered
        
    }//GEN-LAST:event_jInternalFrame1MouseEntered

    private void menuCommandAjouterNoeudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAjouterNoeudActionPerformed
        mouseClickState = "ajoutNoeud";
        mouseClickStatePersistance = false;
        Print.setText("Clickez pour ajouter un noeud");
    }//GEN-LAST:event_menuCommandAjouterNoeudActionPerformed

    private void menuOptionSeeCoordsDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOptionSeeCoordsDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuOptionSeeCoordsDisplayActionPerformed

    private void menuCommandDeplacerNoeudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandDeplacerNoeudActionPerformed
        mouseClickState = "deplacerNoeud";
        Print.setText("Cliquez pour déplacer l'object selectioné");
    }//GEN-LAST:event_menuCommandDeplacerNoeudActionPerformed

    private void menuCommandAjouterAreteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAjouterAreteActionPerformed
        mouseClickState = "ajoutArete";
        mouseClickStatePersistance = false;
        Print.setText("Selectionnez/créez le noeud de départ");
    }//GEN-LAST:event_menuCommandAjouterAreteActionPerformed

    private void menuCommandSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandSupprimerActionPerformed
        delete();
    }//GEN-LAST:event_menuCommandSupprimerActionPerformed

    private void fenetre_sim1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_fenetre_sim1MouseWheelMoved
        // TODO add your handling code here:
        
        fenetre_sim1.updateScale(evt.getWheelRotation());
    }//GEN-LAST:event_fenetre_sim1MouseWheelMoved

    private void fenetre_sim1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fenetre_sim1MouseDragged
        // TODO add your handling code here:
        int x =  fenetre_sim1.getGridPositionX(evt.getX());
        int y =  fenetre_sim1.getGridPositionY(evt.getY());
        
        if (dragSelect){
            if (x < pressedX){
                if (y < pressedY){
                    fenetre_sim1.selectionRectangle.setRect(x, y, pressedX-x, pressedY-y);
                    System.out.println("Case1");
                }
                else{
                    fenetre_sim1.selectionRectangle.setRect(x, pressedY, pressedX-x, y-pressedY);
                    System.out.println("Case2");
                }
            }
            else{
                if (y < pressedY){
                    fenetre_sim1.selectionRectangle.setRect(pressedX, y, x-pressedX, pressedY-y);
                    System.out.println("Case3");
                }
                else{
                    fenetre_sim1.selectionRectangle.setRect(pressedX, pressedY, x-pressedX, y-pressedY);
                    System.out.println("Case4");
                }
            }
            fenetre_sim1.repaint();
        }
         if (dragMove){
             int moveX =  pressedX - x;
             int moveY =  pressedY -  y;
             fenetre_sim1.setCenterPosition(moveX, moveY);
        }
    }//GEN-LAST:event_fenetre_sim1MouseDragged

    private void fenetre_sim1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fenetre_sim1MouseReleased
        // TODO add your handling code here:
       
        
        if (SwingUtilities.isRightMouseButton(evt)){
            dragMove = false;
            fenetre_sim1.createLineTemp.setLine(0, 0, 0, 0);
            repaint();
        }
        if (SwingUtilities.isLeftMouseButton(evt)){
            if (dragSelect){
                selectRectangle();
            }
            dragSelect = false;
            
            //fenetre_sim1.selectionRectangle.setRect(0, 0, 0, 0);
            repaint();
        }
    }//GEN-LAST:event_fenetre_sim1MouseReleased

    private void sim_timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sim_timeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sim_timeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        fenetre_sim1.resetDisplay();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void selectorToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorToggleButtonActionPerformed
        clearSelection();
        mouseClickState = "selection";
        mouseClickStatePersistance = false;
        Print.setText("Clickez pour ajouter un noeud");
        
    }//GEN-LAST:event_selectorToggleButtonActionPerformed

    private void addNodeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodeToggleButtonActionPerformed
        clearSelection();
        mouseClickState = "ajoutNoeud";
        mouseClickStatePersistance = true;
        Print.setText("Clickez pour ajouter un noeud");
        
    }//GEN-LAST:event_addNodeToggleButtonActionPerformed

    private void addAreteToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAreteToggleButtonActionPerformed
        clearSelection();
        mouseClickStatePersistance = true;
        Print.setText("Ajoutez une arête");
        mouseClickState = "ajoutArete";
    }//GEN-LAST:event_addAreteToggleButtonActionPerformed

    private void buttonBesoinsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBesoinsActionPerformed
        // TODO add your handling code here:
        
        if (Sim.getRouteQuantity()>0){
            Sim.newDirections = new Directions();
            startComboBox.setEnabled(true);
            DefaultComboBoxModel startComboBoxModel = new DefaultComboBoxModel();
            for(Node n: Sim.listNodes){

                if(n.isStation){
                    startComboBoxModel.addElement(n.getName());
                }
                
            }
            startComboBox.setModel(startComboBoxModel);
            Dialog_besoin_transport.setVisible(true);
            
        }
        else{
            Print.setText("Il n'y a aucun circuit de créé!");
        }
        
    }//GEN-LAST:event_buttonBesoinsActionPerformed

    private void startComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startComboBoxActionPerformed
        // TODO add your handling code here:
        if (startComboBox.isEnabled()){
           String startStationName = (String)startComboBox.getSelectedItem();
           Node n = Sim.getNodeFromName(startStationName);
           fenetre_sim1.clearSelection();
           selectedNode.add(n);
           fenetre_sim1.selectNode(selectedNode);
           DefaultComboBoxModel routesComboBoxModel = new DefaultComboBoxModel();
            for(Route r: n.listRoutes){
                if (r.route.lastIndexOf(n) != r.getNumberOfNodes()-1 || (r.isLoop && r.getNumberOfNodes()>1)){
                    routesComboBoxModel.addElement(r.getNumber());
                }
            }
            routesComboBox.setModel(routesComboBoxModel);
            routesComboBox.setEnabled(true);
            endComboBox.setEnabled(false);
        }
        
    }//GEN-LAST:event_startComboBoxActionPerformed

    private void addSubRouteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSubRouteButtonActionPerformed
        // TODO add your handling code here:
        if(endComboBox.isEnabled()){
            Route r = Sim.getRouteFromNumber((int)routesComboBox.getSelectedItem());
            String startName =(String)startComboBox.getSelectedItem();
            String endName =(String)endComboBox.getSelectedItem();
            Sim.newDirections.addSubRoute(r, r.getNodeIndexFromName(startName),r.getNodeIndexFromName(endName));
            listSubRoutesModel.addElement("Circuit "+r.getNumber()+": "+startName+" à "+endName);
            DefaultComboBoxModel startComboBoxModel = new DefaultComboBoxModel();
            endComboBox.setEnabled(false);
            routesComboBox.setEnabled(false);
            startComboBoxModel.addElement((String)endComboBox.getSelectedItem());
            startComboBox.setModel(startComboBoxModel);
            okDirections.setEnabled(true);
        }
    }//GEN-LAST:event_addSubRouteButtonActionPerformed

    private void routesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routesComboBoxActionPerformed
        // TODO add your handling code here:
        
        if (routesComboBox.isEnabled()){
            int routeNumber = (int)routesComboBox.getSelectedItem(); 
            Route r = Sim.getRouteFromNumber(routeNumber);
            fenetre_sim1.selectRoute(r);
            DefaultComboBoxModel endComboBoxModel = new DefaultComboBoxModel();
            Boolean startAdding =false;
            String startStationName = (String)startComboBox.getSelectedItem();
            Node startStation = Sim.getNodeFromName(startStationName);
            int numberAdded = 0;
            for(Node n: r.route){
                if (startAdding && n.isStation){
                  if (n != startStation && n != Sim.newDirections.getStartPoint()){
                        endComboBoxModel.addElement(n.getName());
                        numberAdded++;
                    }
                }
                if (n.isStation && n == startStation){
                    startAdding = true;
                    
                }
            }
            endComboBox.setModel(endComboBoxModel);
            if (numberAdded>0){
                endComboBox.setEnabled(true);
            }
        }   
    }//GEN-LAST:event_routesComboBoxActionPerformed

    private void endComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endComboBoxActionPerformed
        // TODO add your handling code here:
        addSubRouteButton.setEnabled(true);
        String endStationName = (String)endComboBox.getSelectedItem();
        selectedNode.add(Sim.getNodeFromName(endStationName));
        fenetre_sim1.clearSelection();
        fenetre_sim1.selectNode(selectedNode);
    }//GEN-LAST:event_endComboBoxActionPerformed

    private void okDirectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okDirectionsActionPerformed
        // TODO add your handling code here:
        Sim.newDirections.setTimeFirstStart((int)spinFirstStart.getValue());
        Sim.newDirections.setFrequency((int)spinFreqPassenger.getValue());
        listDirectionsModel.addElement(Sim.newDirections.getStartPoint().getName()+" à "+Sim.newDirections.getEndPoint().getName());
        Sim.addDirection();
        
        Dialog_besoin_transport.dispatchEvent(new WindowEvent(Dialog_besoin_transport, WindowEvent.WINDOW_CLOSING));
       
    }//GEN-LAST:event_okDirectionsActionPerformed

    private void Dialog_besoin_transportWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Dialog_besoin_transportWindowClosing
        // TODO add your handling code here:
         listSubRoutesModel.removeAllElements();
    }//GEN-LAST:event_Dialog_besoin_transportWindowClosing

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:
      try
      {
         FileOutputStream fileOut =
         new FileOutputStream("sim.ser");
         ObjectOutputStream out = new ObjectOutputStream(fileOut);
         out.writeObject(Sim);
         out.close();
         fileOut.close();
         System.out.printf("Serialized data is saved in /sim.ser");
      }catch(IOException i)
      {
          i.printStackTrace();
      }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void buttonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadActionPerformed
        // TODO add your handling code here:
              try
      {
         FileInputStream fileIn = new FileInputStream("sim.ser");
         ObjectInputStream in = new ObjectInputStream(fileIn);
         Sim = (Simulation) in.readObject();
         fenetre_sim1.Sim = Sim;
         
         if (!Sim.listRoutes.isEmpty()){
             buttonBesoins.setEnabled(true);
         }
         //refait la liste dans l'interface
         listRoutesModel.removeAllElements();
         listDirectionsModel.removeAllElements();
         for (Route r: Sim.listRoutes){
             listRoutesModel.addElement(r.getNumber());
         }
         for (Directions d: Sim.listDirections){
             listDirectionsModel.addElement(d.getStartPoint().getName()+" à "+d.getEndPoint().getName());
         }
         
         fenetre_sim1.repaint();
         simTimer = new SimTimer(Sim, fenetre_sim1, this);
         in.close();
         fileIn.close();
      }catch(IOException i)
      {
         i.printStackTrace();
         return;
      }catch(ClassNotFoundException c)
      {
         System.out.println("Simulation class not found");
         c.printStackTrace();
         return;
      }
    }//GEN-LAST:event_buttonLoadActionPerformed

    private void buttonStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStatsActionPerformed
        // TODO add your handling code here:
        // faire la sim au complet d'une shot (boucle for qui fait simulateTick X fois sans afficher)
          timeJSpinnerStart.setTime();
            timeJSpinnerStop.setTime();
            int deltaHours = timeJSpinnerStop.getHours() - timeJSpinnerStart.getHours();
            if (deltaHours < 0){
                deltaHours+= 24;
            }
            int deltaMinutes = timeJSpinnerStop.getMinutes()- timeJSpinnerStart.getMinutes();
            
            deltaMinutes += deltaHours*60;
        simTimer.start(deltaMinutes, TICK_TIME, true);
    }//GEN-LAST:event_buttonStatsActionPerformed

    private void checkBoxStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxStationActionPerformed
        // TODO add your handling code here:
        if(!selectedNode.isEmpty()){
            Boolean isStation = checkBoxStation.isSelected();
            if (isStation){
                Sim.addStation(selectedNode);
                textStationName.setText(selectedNode.get(0).getName());
                selectedObject = "Station";
            }
            else{
                Sim.deleteStation(selectedNode);
                textStationName.setText("-");
            }
            fenetre_sim1.repaint();

        }

    }//GEN-LAST:event_checkBoxStationActionPerformed

    private void checkLoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkLoopActionPerformed
        // TODO add your handling code here:
        if (selectedRoute != null){
            selectedRoute.isLoop = checkLoop.isSelected();
        }
    }//GEN-LAST:event_checkLoopActionPerformed

    private void buttonSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSourceActionPerformed
        // TODO add your handling code here:
        String name = (String) comboSource.getSelectedItem();
        Node n = Sim.getNodeFromName(name);
        listSourcesModel.addElement(name);
        int typeFreq = (Integer)spinFreqType.getValue();
        int minFreq = (Integer)spinFreqMin.getValue();
        int maxFreq = (Integer)spinFreqMax.getValue();
        int timeFirstStart = (Integer)spin_t.getValue();

        selectedRoute.addSource(n, timeFirstStart, minFreq, maxFreq, typeFreq);
        
    }//GEN-LAST:event_buttonSourceActionPerformed

    private void listSourcesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSourcesMouseClicked
        // TODO add your handling code here:
        int i = listSources.getSelectedIndex();
        String name = (String) listSources.getSelectedValue();
        Node n = Sim.getNodeFromName(name);
        fenetre_sim1.clearSelection();
        selectedNode.add(n);
        fenetre_sim1.selectNode(selectedNode);
        
        if (i >= 0){
            Route.Source s = selectedRoute.listSources.get(i);
            spin_t.setValue(s.timeFirstStart);
            spinFreqType.setValue(s.typeFrequency);
            spinFreqMax.setValue(s.maxFrequency);
            spinFreqMin.setValue(s.minFrequency);
        }
        
    }//GEN-LAST:event_listSourcesMouseClicked

    private void listSourcesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSourcesValueChanged
        // TODO add your handling code here:
        listSourcesMouseClicked(null);
    }//GEN-LAST:event_listSourcesValueChanged

    private void buttonApplySourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplySourceActionPerformed
        // TODO add your handling code here:
        
        int i = listSources.getSelectedIndex();
           if (i >= 0){
        Route.Source s = selectedRoute.listSources.get(i);
        s.setTimeFirstStart((int)spin_t.getValue());
        s.typeFrequency = (int) spinFreqType.getValue();
        s.minFrequency = (int) spinFreqMin.getValue();
        s.maxFrequency = (int) spinFreqMax.getValue();
           }
    }//GEN-LAST:event_buttonApplySourceActionPerformed

    private void buttonDeleteSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteSourceActionPerformed
        // TODO add your handling code here:
        int i = listSources.getSelectedIndex();
        if (i >= 0){
            listSourcesModel.removeElementAt(i);
            selectedRoute.listSources.remove(i);
        }
    }//GEN-LAST:event_buttonDeleteSourceActionPerformed

    private void buttonEditRouteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditRouteActionPerformed
        // TODO add your handling code here:
        if (selectedRoute != null){

            createRouteState = "Edit";
            listSourcesModel.removeAllElements();
            listPossibleSourcesModel.removeAllElements();

            for (Route.Source s: selectedRoute.listSources){
                listSourcesModel.addElement(s.originNode.getName());
            }

            for (Node n: selectedRoute.route){
                if (n.isStation && selectedRoute.getNumberOfNodes() != selectedRoute.route.lastIndexOf(n)+1){
                    listPossibleSourcesModel.addElement(n.getName());
                }
            }
            spin_num.setValue(selectedRoute.getNumber());
            maxBus.setValue(selectedRoute.getMaxBus());
            Dialog_circuit.setVisible(true);
        }
    }//GEN-LAST:event_buttonEditRouteActionPerformed

    private void Bouton_circuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_circuitActionPerformed
        // TODO add your handling code here:

        if (createRouteState == "select" ){
            if (!selectedNode.isEmpty()){
                if (selectedNode.get(0).isStation && Sim.newRoute.route.size()>1){

                    createRouteState = "dialog";
                    listSourcesModel.removeAllElements();
                    listPossibleSourcesModel.removeAllElements();
                    for (Node n: Sim.newRoute.route)
                    if (n.isStation ){
                        if (n != Sim.newRoute.getNodeFromIndex(Sim.newRoute.getNumberOfNodes()-1)){
                            listPossibleSourcesModel.addElement(n.getName());
                        }

                    }
                    Sim.newRoute.updateIfLoop();
                    if (Sim.newRoute.canLoop){
                         listPossibleSourcesModel.addElement(Sim.newRoute.route.get(0).getName());
                          checkLoop.setEnabled(true);
                    }

                       

                    else{
                        checkLoop.setEnabled(false);
                    }
                }
                else{
                    createRouteState = "reset";
                }
            }
            else{
                createRouteState = "reset";
            }

        }

        if (createRouteState == "idle" && Sim.getNodeQuantity() >= 2){
            clearSelection();
            Sim.newRoute = new Route();
            createRouteState = "select";

        }

        createRoute();
    }//GEN-LAST:event_Bouton_circuitActionPerformed

    private void listRoutesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listRoutesValueChanged
        // TODO add your handling code here:

        int i = listRoutes.getSelectedIndex();

        if (i>=0){

            int number =(int) listRoutesModel.getElementAt(i);
            selectedRoute = Sim.getRouteFromNumber(number);
            selectedObject = "Circuit";
            Print.setText("Circuit sélectionné: "+selectedRoute.getNumber());
            fenetre_sim1.clearSelection();
            fenetre_sim1.selectRoute(selectedRoute);
            if (selectedRoute.canLoop){
                checkLoop.setEnabled(true);
                checkLoop.setSelected(selectedRoute.isLoop);
            }
            else{
                checkLoop.setEnabled(false);
                checkLoop.setSelected(selectedRoute.isLoop);
            }
        }
        fenetre_sim1.repaint();
    }//GEN-LAST:event_listRoutesValueChanged

    private void listRoutesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listRoutesMouseClicked
        // TODO add your handling code here:
        listRoutesValueChanged(null);
    }//GEN-LAST:event_listRoutesMouseClicked

    private void listDirectionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listDirectionsMouseClicked
        // TODO add your handling code here:

        int i = listDirections.getSelectedIndex();

        if (i>=0){

            selectedDirections = Sim.listDirections.get(i);
            selectedObject = "Directions";
            Print.setText("Besoin en transport sélectionné: "+selectedDirections.getStartPoint().getName()+ " à "+selectedDirections.getEndPoint().getName());
            fenetre_sim1.clearSelection();
            fenetre_sim1.selectDirections(selectedDirections);

        }
        fenetre_sim1.repaint();
    }//GEN-LAST:event_listDirectionsMouseClicked

    private void listDirectionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listDirectionsValueChanged
        // TODO add your handling code here:
        listDirectionsMouseClicked(null);
    }//GEN-LAST:event_listDirectionsValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void applyLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyLineActionPerformed
        // TODO add your handling code here:
        if (selectedObject == "Line"){
            try{
                spinMinSpeed.commitEdit();
                spinMaxSpeed.commitEdit();
                spinTypeSpeed.commitEdit();
            }
            catch(Exception e){

            }
            selectedLine.minSpeed = (double)(Integer)spinMinSpeed.getValue()*1000/60;
            selectedLine.maxSpeed = (double)(Integer)spinMaxSpeed.getValue()*1000/60;
            selectedLine.typeSpeed = (double)(Integer)spinTypeSpeed.getValue()*1000/60;

        }
    }//GEN-LAST:event_applyLineActionPerformed

    private void comboSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSourceActionPerformed
        // TODO add your handling code here:
        String name = (String) comboSource.getSelectedItem();
        Node n = Sim.getNodeFromName(name);
        fenetre_sim1.clearSelection();
        selectedNode.clear();
        selectedNode.add(n);
        fenetre_sim1.selectNode(selectedNode);
    }//GEN-LAST:event_comboSourceActionPerformed

    private void textStationNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textStationNameKeyReleased
        // TODO add your handling code here:
        
          if (!evt.isActionKey()){

                    if (selectedNode != null){
            if (selectedNode.get(0).isStation){

                selectedNode.get(0).setName(textStationName.getText());
                listDirectionsModel.removeAllElements();
                for (Directions d: Sim.listDirections){
                    listDirectionsModel.addElement(d.getStartPoint().getName()+" à "+d.getEndPoint().getName());
                }
                Print.setText("Station selectionnée: " + selectedNode.get(0).getName());
            }
        }
        }

    }//GEN-LAST:event_textStationNameKeyReleased

    private void moveToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToggleButtonActionPerformed
        // TODO add your handling code here:
        mouseClickStatePersistance = true;
        Print.setText("Déplacer la sélection");
        mouseClickState = "deplacerNoeud";
    }//GEN-LAST:event_moveToggleButtonActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                try {
                    UIManager.setLookAndFeel(new SyntheticaBlackEyeLookAndFeel());
                } catch (ParseException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(SimulatHeure.class.getName()).log(Level.SEVERE, null, ex);
                }


                new SimulatHeure().setVisible(true);
           
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bouton_arreter;
    private javax.swing.JButton Bouton_circuit;
    private javax.swing.JButton Bouton_simuler;
    private javax.swing.JDialog Dialog_besoin_transport;
    private javax.swing.JDialog Dialog_circuit;
    private javax.swing.JTextPane Print;
    private javax.swing.JToggleButton addAreteToggleButton;
    private javax.swing.JToggleButton addNodeToggleButton;
    private javax.swing.JButton addSubRouteButton;
    private javax.swing.JButton applyLine;
    private javax.swing.JButton buttonApplySource;
    private javax.swing.JButton buttonBesoins;
    private javax.swing.JButton buttonDeleteSource;
    private javax.swing.JButton buttonEditRoute;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonLoad;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonSource;
    private javax.swing.JButton buttonStats;
    private javax.swing.JCheckBox checkBoxStation;
    private javax.swing.JCheckBox checkLoop;
    private javax.swing.JComboBox comboSource;
    private javax.swing.JLabel displayLabelCoordonnees;
    private javax.swing.ButtonGroup editionButtonGroup;
    private javax.swing.JInternalFrame editionToolbox;
    private javax.swing.JComboBox endComboBox;
    private simulatheure.SimDisplay fenetre_sim1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JInternalFrame jInternalFrame3;
    private javax.swing.JInternalFrame jInternalFrame4;
    private javax.swing.JInternalFrame jInternalFrame5;
    private javax.swing.JInternalFrame jInternalFrame6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JList listDirections;
    private javax.swing.JList listRoutes;
    private javax.swing.JList listSources;
    private javax.swing.JList listSubRoutes;
    private javax.swing.JSpinner maxBus;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JMenuItem menuCommandAjouterArete;
    private javax.swing.JMenuItem menuCommandAjouterCircuit;
    private javax.swing.JMenuItem menuCommandAjouterNoeud;
    private javax.swing.JMenuItem menuCommandAnalResults;
    private javax.swing.JMenuItem menuCommandDeplacerNoeud;
    private javax.swing.JMenuItem menuCommandEnregSous;
    private javax.swing.JMenuItem menuCommandEnregistrer;
    private javax.swing.JMenuItem menuCommandLancerSim;
    private javax.swing.JMenuItem menuCommandModCircuit;
    private javax.swing.JMenuItem menuCommandNouvDoc;
    private javax.swing.JMenuItem menuCommandOuvrir;
    private javax.swing.JMenuItem menuCommandStopperSim;
    private javax.swing.JMenuItem menuCommandSupprimer;
    private javax.swing.JMenu menuFolderAffichage;
    private javax.swing.JMenu menuFolderCircuit;
    private javax.swing.JMenu menuFolderEdition;
    private javax.swing.JMenu menuFolderFichier;
    private javax.swing.JMenu menuFolderSimulation;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeCircuitToolbox;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeCoordsDisplay;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeEditionToolbox;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeSimToolbox;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeTooltipsDisplay;
    private javax.swing.JMenu menuSubfolderInformation;
    private javax.swing.JMenu menuSubfolderToolboxes;
    private javax.swing.JToggleButton moveToggleButton;
    private javax.swing.JButton okDirections;
    private javax.swing.JButton ok_dialog_circuit;
    private javax.swing.JComboBox routesComboBox;
    private javax.swing.JToggleButton selectorToggleButton;
    private javax.swing.JTextField sim_time;
    private javax.swing.JSlider simulation_speed;
    private javax.swing.JSpinner spinFirstStart;
    private javax.swing.JSpinner spinFreqMax;
    private javax.swing.JSpinner spinFreqMin;
    private javax.swing.JSpinner spinFreqPassenger;
    private javax.swing.JSpinner spinFreqType;
    private javax.swing.JSpinner spinMaxSpeed;
    javax.swing.JSpinner spinMinSpeed;
    private javax.swing.JSpinner spinTypeSpeed;
    private javax.swing.JSpinner spin_num;
    private javax.swing.JSpinner spin_t;
    private javax.swing.JComboBox startComboBox;
    private javax.swing.JFormattedTextField textStationName;
    private simulatheure.TimeJSpinner timeJSpinnerStart;
    private simulatheure.TimeJSpinner timeJSpinnerStop;
    // End of variables declaration//GEN-END:variables
}
