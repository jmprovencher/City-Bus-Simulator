/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simulatheure;

import Reseau.*;
import java.util.List;
import java.io.*;
import java.awt.*;
import java.awt.image.*;
import javax.imageio.*;
import java.util.*;
import javax.swing.*;
import java.awt.Cursor;


/**
 *
 * @author rem54
 */
public class SimulatHeure extends javax.swing.JFrame {

    /**
     * Creates new form SimulatHeure
     */
    public Simulation Sim;
    public Noeud Noeud_selectionne;
    public Noeud noeudBuffer;
    public Circuit Circuit_selectionnee;
    public Point pointBuffer;
    public int lineCreationState;
    public String Element_selectionne;
    public String Creation_circuit_etat;
    public SimTimer simTimer;
    public DefaultListModel model_selection_circuits;
    
    private Cursor defaultCursor;
    private Cursor handCursor;
    private Cursor quadraArrowsCursor;
    private String mouseClickState;
    
    public SimulatHeure() {
        
        initComponents();
        Sim = fenetre_sim1.Sim;
        Creation_circuit_etat = "Demande param";
        mouseClickState = "selection";
        model_selection_circuits = new DefaultListModel();
        liste_circuits.setModel(model_selection_circuits);
        Dialog_circuit.pack();
        lineCreationState = 0;
        simTimer = new SimTimer(Sim);
        
        defaultCursor = new Cursor(0); // pointing hand
        handCursor = new Cursor(12); // pointing hand
        quadraArrowsCursor = new Cursor(13); // crosshair arrows
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Dialog_circuit = new javax.swing.JDialog();
        ok_dialog_circuit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        spin_num = new javax.swing.JSpinner();
        spin_freq = new javax.swing.JSpinner();
        spin_t = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem12 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        Print = new javax.swing.JTextPane();
        fenetre_sim1 = new simulatheure.FenetreSim();
        displayLabelCoordonnees = new javax.swing.JLabel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        text_nom = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        liste_circuits = new javax.swing.JList();
        Bouton_circuit = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jInternalFrame2 = new javax.swing.JInternalFrame();
        Bouton_arreter = new javax.swing.JButton();
        Bouton_simuler = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        sim_duration = new javax.swing.JTextField();
        simulation_speed = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFolderFichier = new javax.swing.JMenu();
        menuCommandNouvDoc = new javax.swing.JMenuItem();
        menuCommandOuvrir = new javax.swing.JMenuItem();
        menuCommandEnregistrer = new javax.swing.JMenuItem();
        menuCommandEnregSous = new javax.swing.JMenuItem();
        menuFolderEdition = new javax.swing.JMenu();
        menuCommandSupprimer = new javax.swing.JMenuItem();
        menuCommandAjouterNoeud = new javax.swing.JMenuItem();
        menuCommandAjouterStation = new javax.swing.JMenuItem();
        menuCommandAjouterArete = new javax.swing.JMenuItem();
        menuCommandDeplacerNoeud = new javax.swing.JMenuItem();
        menuFolderSimulation = new javax.swing.JMenu();
        menuCommandLancerSim = new javax.swing.JMenuItem();
        menuCommandStopperSim = new javax.swing.JMenuItem();
        menuCommandAnalResults = new javax.swing.JMenuItem();
        menuFolderCircuit = new javax.swing.JMenu();
        menuCommandAjouterCircuit = new javax.swing.JMenuItem();
        menuCommandModCircuit = new javax.swing.JMenuItem();
        menuFolderAffichage = new javax.swing.JMenu();
        menuSubfolderToolboxes = new javax.swing.JMenu();
        menuOptionSeeCircuitToolbox = new javax.swing.JCheckBoxMenuItem();
        menuOptionSeeSimToolbox = new javax.swing.JCheckBoxMenuItem();
        menuSubfolderInformation = new javax.swing.JMenu();
        menuOptionSeeCoordsDisplay = new javax.swing.JCheckBoxMenuItem();
        menuOptionSeeTooltipsDisplay = new javax.swing.JCheckBoxMenuItem();

        Dialog_circuit.setAlwaysOnTop(true);
        Dialog_circuit.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        Dialog_circuit.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        Dialog_circuit.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                Dialog_circuitWindowClosing(evt);
            }
        });

        ok_dialog_circuit.setText("Ok");
        ok_dialog_circuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_dialog_circuitActionPerformed(evt);
            }
        });

        jLabel3.setText("Numéro");

        jLabel4.setText("Fréquence");

        jLabel5.setText("Temps avant premier départ");

        spin_num.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));

        spin_freq.setModel(new javax.swing.SpinnerNumberModel(5, 0, 999, 1));

        spin_t.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));

        javax.swing.GroupLayout Dialog_circuitLayout = new javax.swing.GroupLayout(Dialog_circuit.getContentPane());
        Dialog_circuit.getContentPane().setLayout(Dialog_circuitLayout);
        Dialog_circuitLayout.setHorizontalGroup(
            Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)))
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(ok_dialog_circuit))
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(spin_num, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(spin_freq, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Dialog_circuitLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(spin_t, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Dialog_circuitLayout.setVerticalGroup(
            Dialog_circuitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Dialog_circuitLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spin_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spin_freq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spin_t, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ok_dialog_circuit)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jMenuItem12.setText("jMenuItem12");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SimulatHeure");
        setBackground(new java.awt.Color(0, 0, 0));
        setMinimumSize(new java.awt.Dimension(762, 525));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        Print.setEditable(false);
        Print.setBorder(null);
        Print.setToolTipText("");
        Print.setFocusable(false);
        jScrollPane1.setViewportView(Print);

        fenetre_sim1.setBackground(new java.awt.Color(255, 255, 255));
        fenetre_sim1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        fenetre_sim1.setAutoscrolls(true);
        fenetre_sim1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                fenetre_sim1MouseMoved(evt);
            }
        });
        fenetre_sim1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fenetre_sim1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout fenetre_sim1Layout = new javax.swing.GroupLayout(fenetre_sim1);
        fenetre_sim1.setLayout(fenetre_sim1Layout);
        fenetre_sim1Layout.setHorizontalGroup(
            fenetre_sim1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 678, Short.MAX_VALUE)
        );
        fenetre_sim1Layout.setVerticalGroup(
            fenetre_sim1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        displayLabelCoordonnees.setText("Coordonnées");

        jInternalFrame1.setTitle("Circuit");
        jInternalFrame1.setAutoscrolls(true);
        jInternalFrame1.setVisible(true);
        jInternalFrame1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jInternalFrame1MouseEntered(evt);
            }
        });

        jLabel1.setText("Nom");

        text_nom.setToolTipText("");
        text_nom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_nomActionPerformed(evt);
            }
        });

        jLabel6.setText("Circuits");

        liste_circuits.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        liste_circuits.setMaximumSize(new java.awt.Dimension(100, 100));
        liste_circuits.setMinimumSize(new java.awt.Dimension(100, 100));
        liste_circuits.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                liste_circuitsFocusGained(evt);
            }
        });
        liste_circuits.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                liste_circuitsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(liste_circuits);

        Bouton_circuit.setText("Ajouter Circuit");
        Bouton_circuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_circuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(text_nom)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6)
                            .addComponent(Bouton_circuit, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_nom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Bouton_circuit)
                .addContainerGap())
        );

        jInternalFrame2.setTitle("Simulation");
        jInternalFrame2.setVisible(true);

        Bouton_arreter.setText("Arrêter");
        Bouton_arreter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_arreterActionPerformed(evt);
            }
        });

        Bouton_simuler.setText("Simuler");
        Bouton_simuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_simulerActionPerformed(evt);
            }
        });

        jLabel7.setText("Durée (s)");

        sim_duration.setText("60");
        sim_duration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sim_durationActionPerformed(evt);
            }
        });

        simulation_speed.setMinimum(1);
        simulation_speed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                simulation_speedStateChanged(evt);
            }
        });

        jLabel8.setText("Vitesse");

        javax.swing.GroupLayout jInternalFrame2Layout = new javax.swing.GroupLayout(jInternalFrame2.getContentPane());
        jInternalFrame2.getContentPane().setLayout(jInternalFrame2Layout);
        jInternalFrame2Layout.setHorizontalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(Bouton_arreter, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(simulation_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(Bouton_simuler, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jInternalFrame2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(49, 49, 49)
                        .addComponent(sim_duration)))
                .addContainerGap())
        );
        jInternalFrame2Layout.setVerticalGroup(
            jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bouton_arreter)
                    .addComponent(Bouton_simuler))
                .addGap(8, 8, 8)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(simulation_speed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jInternalFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sim_duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        menuFolderFichier.setMnemonic('f');
        menuFolderFichier.setText("Fichier");

        menuCommandNouvDoc.setText("Nouveau document");
        menuFolderFichier.add(menuCommandNouvDoc);

        menuCommandOuvrir.setText("Ouvrir");
        menuFolderFichier.add(menuCommandOuvrir);

        menuCommandEnregistrer.setText("Enregistrer");
        menuFolderFichier.add(menuCommandEnregistrer);

        menuCommandEnregSous.setText("Enregistrer sous");
        menuFolderFichier.add(menuCommandEnregSous);

        jMenuBar1.add(menuFolderFichier);

        menuFolderEdition.setMnemonic('e');
        menuFolderEdition.setText("Edition");

        menuCommandSupprimer.setMnemonic('u');
        menuCommandSupprimer.setText("Supprimer");
        menuCommandSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandSupprimerActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandSupprimer);

        menuCommandAjouterNoeud.setMnemonic('o');
        menuCommandAjouterNoeud.setText("Ajouter Noeud");
        menuCommandAjouterNoeud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAjouterNoeudActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandAjouterNoeud);

        menuCommandAjouterStation.setMnemonic('t');
        menuCommandAjouterStation.setText("Ajouter Station");
        menuCommandAjouterStation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAjouterStationActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandAjouterStation);

        menuCommandAjouterArete.setMnemonic('r');
        menuCommandAjouterArete.setText("Ajouter Arête");
        menuCommandAjouterArete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandAjouterAreteActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandAjouterArete);

        menuCommandDeplacerNoeud.setMnemonic('d');
        menuCommandDeplacerNoeud.setText("Déplacer Noeud/Station");
        menuCommandDeplacerNoeud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCommandDeplacerNoeudActionPerformed(evt);
            }
        });
        menuFolderEdition.add(menuCommandDeplacerNoeud);

        jMenuBar1.add(menuFolderEdition);

        menuFolderSimulation.setMnemonic('s');
        menuFolderSimulation.setText("Simulation");

        menuCommandLancerSim.setText("Lancer simulation");
        menuFolderSimulation.add(menuCommandLancerSim);

        menuCommandStopperSim.setText("Stopper simulation");
        menuFolderSimulation.add(menuCommandStopperSim);

        menuCommandAnalResults.setText("Analyser resultats");
        menuFolderSimulation.add(menuCommandAnalResults);

        jMenuBar1.add(menuFolderSimulation);

        menuFolderCircuit.setMnemonic('c');
        menuFolderCircuit.setText("Circuit");

        menuCommandAjouterCircuit.setText("Ajouter");
        menuFolderCircuit.add(menuCommandAjouterCircuit);

        menuCommandModCircuit.setText("Modifier");
        menuFolderCircuit.add(menuCommandModCircuit);

        jMenuBar1.add(menuFolderCircuit);

        menuFolderAffichage.setMnemonic('a');
        menuFolderAffichage.setText("Affichage");

        menuSubfolderToolboxes.setText("Barres d'outils");

        menuOptionSeeCircuitToolbox.setSelected(true);
        menuOptionSeeCircuitToolbox.setText("Circuit");
        menuSubfolderToolboxes.add(menuOptionSeeCircuitToolbox);

        menuOptionSeeSimToolbox.setSelected(true);
        menuOptionSeeSimToolbox.setText("Simulation");
        menuSubfolderToolboxes.add(menuOptionSeeSimToolbox);

        menuFolderAffichage.add(menuSubfolderToolboxes);

        menuSubfolderInformation.setText("Informations");

        menuOptionSeeCoordsDisplay.setSelected(true);
        menuOptionSeeCoordsDisplay.setText("Coordonées");
        menuOptionSeeCoordsDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOptionSeeCoordsDisplayActionPerformed(evt);
            }
        });
        menuSubfolderInformation.add(menuOptionSeeCoordsDisplay);

        menuOptionSeeTooltipsDisplay.setSelected(true);
        menuOptionSeeTooltipsDisplay.setText("Infobulle");
        menuSubfolderInformation.add(menuOptionSeeTooltipsDisplay);

        menuFolderAffichage.add(menuSubfolderInformation);

        jMenuBar1.add(menuFolderAffichage);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(displayLabelCoordonnees, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(fenetre_sim1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jInternalFrame1)
                            .addComponent(jInternalFrame2))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jInternalFrame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 32, Short.MAX_VALUE))
                    .addComponent(fenetre_sim1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(displayLabelCoordonnees, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void creation_circuit(){
       switch (Creation_circuit_etat){
           
       //deuxieme clic, crée le circuit
       case "reset": // reset
          Creation_circuit_etat = "Demande param";
          //Radio_ajouter.setEnabled(true);
          //Radio_deplacer.setEnabled(true);
          Print.setText("Création de circuit annulée");
          break;
           
       case "Creation":
          if (Sim.parcours.size()>1){
            
            Circuit_selectionnee = Sim.ajouter_circuit(Sim.parcours, (Integer)spin_num.getValue(), (Integer)spin_freq.getValue(), (Integer)spin_t.getValue());
            Element_selectionne = "Circuit";
            
            Sim.parcours.clear();
            
            model_selection_circuits.addElement(Circuit_selectionnee.req_numero());
            liste_circuits.setSelectedIndex(liste_circuits.getLastVisibleIndex());
            Print.setText("Circuit "+ Circuit_selectionnee.req_numero()+ " créé avec succès!");
            fenetre_sim1.repaint();
          }
          else{
              Print.setText("Vous n'avez pas selectionné assez de stations!");
          }
          Creation_circuit_etat = "Demande param";
          //Radio_ajouter.setEnabled(true);
          //Radio_deplacer.setEnabled(true);
          break;
       
        //premier clic (mode selection de stations)
       case  "Demande param":
           fenetre_sim1.clearSelection();
           //dialog
           Dialog_circuit.setVisible(true);
           //
           // cas ou on pese sur le X du dialog
           if (Creation_circuit_etat == "reset"){
               creation_circuit();
               break;
           }
           
           //Radio_ajouter.setEnabled(false);
           //Radio_deplacer.setEnabled(false);
           //Radio_select.setSelected(true);
           List<Noeud> circuit = new ArrayList<Noeud>();
           Print.setText("Veuillez sélectionner la station 1 du circuit.");
           Creation_circuit_etat = "Creation";
           Sim.parcours.clear();
           
           break;
       default:
           break;
           
       }
    }
    public void createNoeud(int x, int y){
        Arete aSelect;
           
        aSelect = null;
        if(Noeud_selectionne == null){
            aSelect = Sim.isLine(x,y); 
        }
        if(aSelect != null){
            Noeud_selectionne = Sim.splitLine(aSelect, x, y);
            Element_selectionne = "Noeud";
            Print.setText("Noeud selectionne!");
            fenetre_sim1.selectNoeud(Noeud_selectionne);
        }
        //Nouveau point
        else if (Noeud_selectionne == null){
            Noeud_selectionne = Sim.addNoeud(x, y);
            Element_selectionne = "Noeud";
            Print.setText("Noeud selectionne!");
            fenetre_sim1.selectNoeud(Noeud_selectionne);
        }

    }
    
    
    public void createLine(int x, int y){
        Arete aSelect;

        switch (lineCreationState){
            case 0:
                aSelect = null;
                if(Noeud_selectionne == null){
                    aSelect = Sim.isLine(x,y); 
                }
                
                if(aSelect != null){
                    noeudBuffer = Sim.splitLine(aSelect, x, y);
                }
                //Nouveau point
                else if (Noeud_selectionne == null){
                    pointBuffer = new Point(x, y);
                    noeudBuffer = null;
                    
                }
                //point existant
                else{
                    noeudBuffer = Noeud_selectionne;
                    Noeud_selectionne = null;
                }
                    
                lineCreationState = 1;
                break;
                
            case 1:
                Noeud noeud1;
                Noeud noeud2;
                aSelect = null;
                if (Noeud_selectionne == null && noeudBuffer == null){
                    noeud1 = new Noeud(pointBuffer.x,pointBuffer.y);
                     aSelect = null;
                     if(Noeud_selectionne == null){
                        aSelect = Sim.isLine(x,y); 
                     }
                    if (aSelect != null){
                        noeud2 = Sim.splitLine(aSelect, x, y);
                    }
                    else{
                        noeud2 = new Noeud(x,y);
                    }
                }
                
                else if (Noeud_selectionne != null && noeudBuffer == null){
                    noeud1 = new Noeud(pointBuffer.x,pointBuffer.y);
                    noeud2 = Noeud_selectionne;
                }
                else if (Noeud_selectionne == null && noeudBuffer != null){
                    noeud1 = noeudBuffer;
                    aSelect = null;
                     if(Noeud_selectionne == null){
                        aSelect = Sim.isLine(x,y); 
                     }
                
                    if (aSelect != null){
                        noeud2 = Sim.splitLine(aSelect, x, y);
                    }
                    else{
                        noeud2 = new Noeud(x,y);
                    }
                }
                else{ //(Noeud_selectionne != null && noeudBuffer != null){
                    noeud1 = noeudBuffer;
                    noeud2 = Noeud_selectionne;
                }
                Sim.addLine(noeud1, noeud2);
                Element_selectionne = "Noeud";
                Noeud_selectionne = noeud2;
                lineCreationState = 0;
                fenetre_sim1.selectNoeud(noeud2);
                mouseClickState = "selection";
                break;
            default:
                break;
        }
    }
    
    
    private void text_nomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_nomActionPerformed
        // TODO add your handling code here:
         Noeud_selectionne.mod_nom(text_nom.getText());
         if (Noeud_selectionne.isStation){
            Print.setText("Station selectionnée: " + text_nom.getText());
         }

         
    }//GEN-LAST:event_text_nomActionPerformed

    private void fenetre_sim1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fenetre_sim1MousePressed
        
        
        //coordonnées du clic
        int x = evt.getX();
        int y = evt.getY();
        fenetre_sim1.x = x;
        fenetre_sim1.y = y;
        
        fenetre_sim1.clearSelection();
        /* -------------- Selection d'un Noeud ------------- */
        
        int size = 20;//   
        int size_s = fenetre_sim1.img_station_size; //taille d'une station
        
        if (mouseClickState.matches("selection|ajoutArete|ajoutNoeud|ajoutStation")){
            //va chercher la station correspondant au clic
            Noeud_selectionne = Sim.req_noeud_pos(x,y, size, size_s);
            if (Noeud_selectionne == null){
                Print.setText("Vous n'avez rien sélectionné");
                text_nom.setText("-");
            }
            if (Noeud_selectionne != null){
                Element_selectionne = "Noeud";
                Print.setText("Noeud selectionne!");
                if (Noeud_selectionne.isStation){
                    Element_selectionne = "Station";
                    Print.setText("Station selectionnée: "+Noeud_selectionne.req_nom());
                    text_nom.setText(Noeud_selectionne.req_nom());
                }
            }

            /* -------------- Ajout de station à un circuit ------------- */
            if (Creation_circuit_etat == "Creation"){
                if (Noeud_selectionne != null){
                    Boolean isPossible = false;
                    if (Sim.parcours.size()>0){
                        for (Arete a: Sim.parcours.get(Sim.parcours.size()-1).listAretes){
                            if (Noeud_selectionne != Sim.parcours.get(Sim.parcours.size()-1)){
                                if (Noeud_selectionne == a.origine || Noeud_selectionne == a.destination){
                                 isPossible = true;
                                 break;
                                }
                            }
                        }
                    }
                    if (isPossible || Sim.parcours.isEmpty()){
                        Sim.parcours.add(Noeud_selectionne);
                        Print.setText("Noeud ajoutée (" +Noeud_selectionne.req_nom()+  ") au parcours!");
                        fenetre_sim1.selectNoeud(Noeud_selectionne);
                    }
                    else{
                        Print.setText("Veuillez sélectionner un noeud valide!");
                    }
                }
            }
            else {
                fenetre_sim1.selectNoeud(Noeud_selectionne);
            }
         }
                
            
        /* -------------- Ajout d'une station ------------- */
        
        if (mouseClickState == "ajoutStation")
        {
            if (Noeud_selectionne != null){
                Sim.ajouter_station(Noeud_selectionne);
                Element_selectionne = "Station";
                Print.setText("Derniere station: " + Noeud_selectionne.req_nom());
                text_nom.setText(Noeud_selectionne.req_nom());
                //fenetre_sim1.selectNoeud(Noeud_selectionne);
            }
            mouseClickState = "selection";
        }
        
        /* -------------- Deplacer station ------------- */
        
        if (mouseClickState == "deplacerNoeud"){
            if (Noeud_selectionne != null)
            {
                Noeud_selectionne.mod_positionX(x);
                Noeud_selectionne.mod_positionY(y);
                //fenetre_sim1.selectStation(Station_selectionnee);
                Sim.updateArete();
            }
            mouseClickState = "selection";
        }
        
        /* -------------- Creation arete ------------- */
        
        if (mouseClickState == "ajoutArete"){
            createLine(x, y);
        }
        /* -------------- Creation noeud ------------- */
        
        if (mouseClickState == "ajoutNoeud"){
            createNoeud(x, y);
            mouseClickState = "selection";
        }
        
        fenetre_sim1.repaint();
    }//GEN-LAST:event_fenetre_sim1MousePressed
    
    private boolean cursorIsOnObject(int x, int y){
        if (Sim.req_noeud_pos(x,y, 20, fenetre_sim1.img_station_size) != null){
            return true;
        }
        return false;
    }
    
    private void fenetre_sim1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fenetre_sim1MouseMoved
       
        displayLabelCoordonnees.setText("X:  "+evt.getX()+"  Y:  "+ evt.getY() );
        if (cursorIsOnObject(evt.getX(), evt.getY())){
            setCursor(handCursor);
        } else{
            setCursor(defaultCursor);
        }
        
    }//GEN-LAST:event_fenetre_sim1MouseMoved
    
    private void Bouton_circuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_circuitActionPerformed
        // TODO add your handling code here:
        creation_circuit();
    }//GEN-LAST:event_Bouton_circuitActionPerformed

    private void ok_dialog_circuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_dialog_circuitActionPerformed
        // TODO add your handling code here:
        Dialog_circuit.dispose();
    }//GEN-LAST:event_ok_dialog_circuitActionPerformed

    private void Dialog_circuitWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Dialog_circuitWindowClosing
        // TODO add your handling code here:
        
        Creation_circuit_etat ="reset";
        
    }//GEN-LAST:event_Dialog_circuitWindowClosing

    private void liste_circuitsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_liste_circuitsValueChanged
        // TODO add your handling code here:
        
       
            int i = liste_circuits.getSelectedIndex();
            if (i>=0){
                
                Circuit_selectionnee = Sim.req_circuit_index(i);
                Element_selectionne = "Circuit";
                Print.setText("Circuit sélectionné: "+Circuit_selectionnee.req_numero());
            }
            else{
                Circuit_selectionnee = null;
                Element_selectionne = "Circuit";
            }
        
    }//GEN-LAST:event_liste_circuitsValueChanged
    
    
    //nécéssaire quand il y a un seul circuit
    private void liste_circuitsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_liste_circuitsFocusGained
        // TODO add your handling code here:
        liste_circuitsValueChanged(null);
    }//GEN-LAST:event_liste_circuitsFocusGained


    private void Bouton_simulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_simulerActionPerformed
        if (!simTimer.running){
            
        simTimer.setSimSpeed(simulation_speed.getValue()/4);
        simTimer.start(Integer.parseInt(sim_duration.getText()), 16);
        fenetre_sim1.displayTimer.start();
                }

    }//GEN-LAST:event_Bouton_simulerActionPerformed

    private void Bouton_arreterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_arreterActionPerformed
        // TODO add your handling code here:
        
            simTimer.stop();
            fenetre_sim1.displayTimer.stop();
            fenetre_sim1.repaint();
         
    }//GEN-LAST:event_Bouton_arreterActionPerformed

    private void menuCommandAjouterStationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAjouterStationActionPerformed
        mouseClickState = "ajoutStation";
        Print.setText("Transformez un noeud en station");
    }//GEN-LAST:event_menuCommandAjouterStationActionPerformed

    private void sim_durationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sim_durationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sim_durationActionPerformed

    private void simulation_speedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_simulation_speedStateChanged
        // TODO add your handling code here:
        simTimer.setSimSpeed(simulation_speed.getValue()/4);
    }//GEN-LAST:event_simulation_speedStateChanged

    private void jInternalFrame1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jInternalFrame1MouseEntered
        
    }//GEN-LAST:event_jInternalFrame1MouseEntered

    private void menuCommandAjouterNoeudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAjouterNoeudActionPerformed
        mouseClickState = "ajoutNoeud";
        Print.setText("Clickez pour ajouter un noeud");
    }//GEN-LAST:event_menuCommandAjouterNoeudActionPerformed

    private void menuOptionSeeCoordsDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOptionSeeCoordsDisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuOptionSeeCoordsDisplayActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        System.out.print("Key pressed: "+evt.KEY_PRESSED);
        if (evt.KEY_PRESSED == 127){
            System.out.println("DELETE pressed");
        }
    }//GEN-LAST:event_formKeyPressed

    private void menuCommandDeplacerNoeudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandDeplacerNoeudActionPerformed
        mouseClickState = "deplacerNoeud";
        Print.setText("Clickez pour déplacer l'object selectioné");
    }//GEN-LAST:event_menuCommandDeplacerNoeudActionPerformed

    private void menuCommandAjouterAreteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandAjouterAreteActionPerformed
        mouseClickState = "ajoutArete";
        Print.setText("Selectionnez/créez le noeud de départ");
    }//GEN-LAST:event_menuCommandAjouterAreteActionPerformed

    private void menuCommandSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCommandSupprimerActionPerformed
        if (Noeud_selectionne != null && (Element_selectionne == "Station" || Element_selectionne == "Noeud")){
            
            if(Sim.supprimer_noeud(Noeud_selectionne)){
                if(Noeud_selectionne.isStation){
                    Print.setText("Station supprimée avec succès.");
                }
                else{
                    Print.setText("Noeud supprimé avec succès.");
                }
            }
        }
        if (Element_selectionne == "Circuit"){
            
            int i = liste_circuits.getSelectedIndex();
            if (i >= 0){


                int numero_circuit = Circuit_selectionnee.req_numero();
                Sim.supprimer_circuit(Circuit_selectionnee);
                model_selection_circuits.remove(i);
                Circuit_selectionnee = null;
                Print.setText("Circuit "+numero_circuit+ " supprimé avec succès.");


            }
            else{
            
                    Print.setText("Il n'y a rien de selectionné à supprimer.");
                

            }
        }
        fenetre_sim1.repaint();
    }//GEN-LAST:event_menuCommandSupprimerActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatHeure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatHeure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatHeure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatHeure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulatHeure().setVisible(true);
           
            }
        });
    }
   
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bouton_arreter;
    private javax.swing.JButton Bouton_circuit;
    private javax.swing.JButton Bouton_simuler;
    private javax.swing.JDialog Dialog_circuit;
    private javax.swing.JTextPane Print;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel displayLabelCoordonnees;
    private simulatheure.FenetreSim fenetre_sim1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JInternalFrame jInternalFrame2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList liste_circuits;
    private javax.swing.JMenuItem menuCommandAjouterArete;
    private javax.swing.JMenuItem menuCommandAjouterCircuit;
    private javax.swing.JMenuItem menuCommandAjouterNoeud;
    private javax.swing.JMenuItem menuCommandAjouterStation;
    private javax.swing.JMenuItem menuCommandAnalResults;
    private javax.swing.JMenuItem menuCommandDeplacerNoeud;
    private javax.swing.JMenuItem menuCommandEnregSous;
    private javax.swing.JMenuItem menuCommandEnregistrer;
    private javax.swing.JMenuItem menuCommandLancerSim;
    private javax.swing.JMenuItem menuCommandModCircuit;
    private javax.swing.JMenuItem menuCommandNouvDoc;
    private javax.swing.JMenuItem menuCommandOuvrir;
    private javax.swing.JMenuItem menuCommandStopperSim;
    private javax.swing.JMenuItem menuCommandSupprimer;
    private javax.swing.JMenu menuFolderAffichage;
    private javax.swing.JMenu menuFolderCircuit;
    private javax.swing.JMenu menuFolderEdition;
    private javax.swing.JMenu menuFolderFichier;
    private javax.swing.JMenu menuFolderSimulation;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeCircuitToolbox;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeCoordsDisplay;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeSimToolbox;
    private javax.swing.JCheckBoxMenuItem menuOptionSeeTooltipsDisplay;
    private javax.swing.JMenu menuSubfolderInformation;
    private javax.swing.JMenu menuSubfolderToolboxes;
    private javax.swing.JButton ok_dialog_circuit;
    private javax.swing.JTextField sim_duration;
    private javax.swing.JSlider simulation_speed;
    private javax.swing.JSpinner spin_freq;
    private javax.swing.JSpinner spin_num;
    private javax.swing.JSpinner spin_t;
    private javax.swing.JTextField text_nom;
    // End of variables declaration//GEN-END:variables
}
